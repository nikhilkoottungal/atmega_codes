
328 adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000004be  00000532  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004be  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         00001674  00000000  00000000  00000538  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000004c0  00000000  00000000  00001bac  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  00002070  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000863  00000000  00000000  00002110  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001d3  00000000  00000000  00002973  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000474  00000000  00000000  00002b46  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  00002fbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000140  00000000  00000000  00003058  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000226  00000000  00000000  00003198  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee eb       	ldi	r30, 0xBE	; 190
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 30       	cpi	r26, 0x04	; 4
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a4 e0       	ldi	r26, 0x04	; 4
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 bf 00 	call	0x17e	; 0x17e <main>
  9e:	0c 94 5d 02 	jmp	0x4ba	; 0x4ba <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_command>:
#include <util/delay.h>

void lcd_command(char cmd)
{
	
	PORTB&=(~0x01);
  a6:	28 98       	cbi	0x05, 0	; 5
	PORTD=cmd;
  a8:	8b b9       	out	0x0b, r24	; 11
	PORTB|=0x02;
  aa:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	8f e1       	ldi	r24, 0x1F	; 31
  ae:	9e e4       	ldi	r25, 0x4E	; 78
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <lcd_command+0xa>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <lcd_command+0x10>
  b6:	00 00       	nop
	_delay_ms(5);
	PORTB&=(~0x02);
  b8:	29 98       	cbi	0x05, 1	; 5
  ba:	8f e1       	ldi	r24, 0x1F	; 31
  bc:	9e e4       	ldi	r25, 0x4E	; 78
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <lcd_command+0x18>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <lcd_command+0x1e>
  c4:	00 00       	nop
	_delay_ms(5);
}
  c6:	08 95       	ret

000000c8 <lcd_data>:


void lcd_data(char data)
{
	
	PORTB|=0x01;
  c8:	28 9a       	sbi	0x05, 0	; 5
	PORTD=data;
  ca:	8b b9       	out	0x0b, r24	; 11
	PORTB|=0x02;
  cc:	29 9a       	sbi	0x05, 1	; 5
  ce:	8f e1       	ldi	r24, 0x1F	; 31
  d0:	9e e4       	ldi	r25, 0x4E	; 78
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <lcd_data+0xa>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <lcd_data+0x10>
  d8:	00 00       	nop
	_delay_ms(5);
	PORTB&=(~0x02);
  da:	29 98       	cbi	0x05, 1	; 5
  dc:	8f e1       	ldi	r24, 0x1F	; 31
  de:	9e e4       	ldi	r25, 0x4E	; 78
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <lcd_data+0x18>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <lcd_data+0x1e>
  e6:	00 00       	nop
	_delay_ms(5);
}
  e8:	08 95       	ret

000000ea <lcd_print>:

void lcd_print(char *ptr)
{
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	ec 01       	movw	r28, r24
	
	while(*ptr!=0)
  f0:	88 81       	ld	r24, Y
  f2:	88 23       	and	r24, r24
  f4:	31 f0       	breq	.+12     	; 0x102 <lcd_print+0x18>
	_delay_ms(5);
	PORTB&=(~0x02);
	_delay_ms(5);
}

void lcd_print(char *ptr)
  f6:	21 96       	adiw	r28, 0x01	; 1
{
	
	while(*ptr!=0)
	{
		
		lcd_data(*ptr);
  f8:	0e 94 64 00 	call	0xc8	; 0xc8 <lcd_data>
}

void lcd_print(char *ptr)
{
	
	while(*ptr!=0)
  fc:	89 91       	ld	r24, Y+
  fe:	88 23       	and	r24, r24
 100:	d9 f7       	brne	.-10     	; 0xf8 <lcd_print+0xe>
	{
		
		lcd_data(*ptr);
		ptr++;
	}
}
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <dtoa>:

void dtoa(unsigned int val,char *buf,char n)
{
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	eb 01       	movw	r28, r22
	
	buf[n]=0;
 10e:	fb 01       	movw	r30, r22
 110:	e4 0f       	add	r30, r20
 112:	f1 1d       	adc	r31, r1
 114:	10 82       	st	Z, r1
	while(n-->0)
 116:	44 23       	and	r20, r20
 118:	99 f0       	breq	.+38     	; 0x140 <dtoa+0x38>
 11a:	41 50       	subi	r20, 0x01	; 1
	{
		
		buf[n]=(val%10)+'0';
 11c:	2a e0       	ldi	r18, 0x0A	; 10
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	01 c0       	rjmp	.+2      	; 0x124 <dtoa+0x1c>

void dtoa(unsigned int val,char *buf,char n)
{
	
	buf[n]=0;
	while(n-->0)
 122:	45 2f       	mov	r20, r21
	{
		
		buf[n]=(val%10)+'0';
 124:	fe 01       	movw	r30, r28
 126:	e4 0f       	add	r30, r20
 128:	f1 1d       	adc	r31, r1
 12a:	b9 01       	movw	r22, r18
 12c:	0e 94 49 02 	call	0x492	; 0x492 <__udivmodhi4>
 130:	80 5d       	subi	r24, 0xD0	; 208
 132:	80 83       	st	Z, r24
		val=val/10;
 134:	86 2f       	mov	r24, r22
 136:	97 2f       	mov	r25, r23

void dtoa(unsigned int val,char *buf,char n)
{
	
	buf[n]=0;
	while(n-->0)
 138:	54 2f       	mov	r21, r20
 13a:	51 50       	subi	r21, 0x01	; 1
 13c:	44 23       	and	r20, r20
 13e:	89 f7       	brne	.-30     	; 0x122 <dtoa+0x1a>
	{
		
		buf[n]=(val%10)+'0';
		val=val/10;
	}
}
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <read_adc>:


int read_adc(int chn)
{
	int val,val1;
	ADMUX=(0x40|(chn & 0x07));
 146:	87 70       	andi	r24, 0x07	; 7
 148:	80 64       	ori	r24, 0x40	; 64
 14a:	80 93 7c 00 	sts	0x007C, r24
	ADCSRA=0x85;
 14e:	ea e7       	ldi	r30, 0x7A	; 122
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	85 e8       	ldi	r24, 0x85	; 133
 154:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 156:	85 e3       	ldi	r24, 0x35	; 53
 158:	8a 95       	dec	r24
 15a:	f1 f7       	brne	.-4      	; 0x158 <read_adc+0x12>
 15c:	00 00       	nop
	_delay_us(10);
	ADCSRA|=0x40;
 15e:	80 81       	ld	r24, Z
 160:	80 64       	ori	r24, 0x40	; 64
 162:	80 83       	st	Z, r24
	while((ADCSRA & 0x40)==0x40);
 164:	80 81       	ld	r24, Z
 166:	86 fd       	sbrc	r24, 6
 168:	fd cf       	rjmp	.-6      	; 0x164 <read_adc+0x1e>
	{
		
		val=ADCL;
 16a:	80 91 78 00 	lds	r24, 0x0078
 16e:	90 e0       	ldi	r25, 0x00	; 0
		val1=ADCH;
 170:	40 91 79 00 	lds	r20, 0x0079
		val|=(val1<<8);
 174:	34 2f       	mov	r19, r20
 176:	20 e0       	ldi	r18, 0x00	; 0
 178:	82 2b       	or	r24, r18
 17a:	93 2b       	or	r25, r19
		return(val);
	}
}
 17c:	08 95       	ret

0000017e <main>:




int main(void)
{
 17e:	cf 93       	push	r28
 180:	df 93       	push	r29
 182:	00 d0       	rcall	.+0      	; 0x184 <main+0x6>
 184:	00 d0       	rcall	.+0      	; 0x186 <main+0x8>
 186:	0f 92       	push	r0
 188:	cd b7       	in	r28, 0x3d	; 61
 18a:	de b7       	in	r29, 0x3e	; 62
	
	float a=0;
	char dispbuf[5];
	DDRB=0x03;
 18c:	83 e0       	ldi	r24, 0x03	; 3
 18e:	84 b9       	out	0x04, r24	; 4
	DDRD=0xFF;
 190:	8f ef       	ldi	r24, 0xFF	; 255
 192:	8a b9       	out	0x0a, r24	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 194:	8f e1       	ldi	r24, 0x1F	; 31
 196:	9e e4       	ldi	r25, 0x4E	; 78
 198:	01 97       	sbiw	r24, 0x01	; 1
 19a:	f1 f7       	brne	.-4      	; 0x198 <main+0x1a>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0x20>
 19e:	00 00       	nop
	//DDRD=0x01;
	_delay_ms(5);
	lcd_command(0x30);
 1a0:	80 e3       	ldi	r24, 0x30	; 48
 1a2:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 1a6:	8f e1       	ldi	r24, 0x1F	; 31
 1a8:	9e e4       	ldi	r25, 0x4E	; 78
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <main+0x2c>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <main+0x32>
 1b0:	00 00       	nop
	_delay_ms(5);
	lcd_command(0x30);
 1b2:	80 e3       	ldi	r24, 0x30	; 48
 1b4:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 1b8:	8f e1       	ldi	r24, 0x1F	; 31
 1ba:	9e e4       	ldi	r25, 0x4E	; 78
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <main+0x3e>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <main+0x44>
 1c2:	00 00       	nop
	_delay_ms(5);
	lcd_command(0x30);
 1c4:	80 e3       	ldi	r24, 0x30	; 48
 1c6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 1ca:	8f e1       	ldi	r24, 0x1F	; 31
 1cc:	9e e4       	ldi	r25, 0x4E	; 78
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <main+0x50>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <main+0x56>
 1d4:	00 00       	nop
	_delay_ms(5);
	lcd_command(0x38);
 1d6:	88 e3       	ldi	r24, 0x38	; 56
 1d8:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 1dc:	8f e1       	ldi	r24, 0x1F	; 31
 1de:	9e e4       	ldi	r25, 0x4E	; 78
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <main+0x62>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <main+0x68>
 1e6:	00 00       	nop
	_delay_ms(5);
	lcd_command(0x01);
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
	lcd_command(0x06);
 1ee:	86 e0       	ldi	r24, 0x06	; 6
 1f0:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
	lcd_command(0X0C);
 1f4:	8c e0       	ldi	r24, 0x0C	; 12
 1f6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
	lcd_command(0x80);
 1fa:	80 e8       	ldi	r24, 0x80	; 128
 1fc:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
		
		dtoa(a,dispbuf,4);
		lcd_command(0x80);
		lcd_print(dispbuf);
		lcd_command(0x85);
		lcd_print("mV");
 200:	00 e0       	ldi	r16, 0x00	; 0
 202:	11 e0       	ldi	r17, 0x01	; 1
	
	while(1)
	{
		
		
		a=4.88*read_adc(0);
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 a3 00 	call	0x146	; 0x146 <read_adc>
 20c:	9c 01       	movw	r18, r24
 20e:	b9 01       	movw	r22, r18
 210:	88 27       	eor	r24, r24
 212:	77 fd       	sbrc	r23, 7
 214:	80 95       	com	r24
 216:	98 2f       	mov	r25, r24
 218:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <__floatsisf>
 21c:	26 ef       	ldi	r18, 0xF6	; 246
 21e:	38 e2       	ldi	r19, 0x28	; 40
 220:	4c e9       	ldi	r20, 0x9C	; 156
 222:	50 e4       	ldi	r21, 0x40	; 64
 224:	0e 94 be 01 	call	0x37c	; 0x37c <__mulsf3>

		
		dtoa(a,dispbuf,4);
 228:	0e 94 2c 01 	call	0x258	; 0x258 <__fixunssfsi>
 22c:	dc 01       	movw	r26, r24
 22e:	cb 01       	movw	r24, r22
 230:	be 01       	movw	r22, r28
 232:	6f 5f       	subi	r22, 0xFF	; 255
 234:	7f 4f       	sbci	r23, 0xFF	; 255
 236:	44 e0       	ldi	r20, 0x04	; 4
 238:	0e 94 84 00 	call	0x108	; 0x108 <dtoa>
		lcd_command(0x80);
 23c:	80 e8       	ldi	r24, 0x80	; 128
 23e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
		lcd_print(dispbuf);
 242:	ce 01       	movw	r24, r28
 244:	01 96       	adiw	r24, 0x01	; 1
 246:	0e 94 75 00 	call	0xea	; 0xea <lcd_print>
		lcd_command(0x85);
 24a:	85 e8       	ldi	r24, 0x85	; 133
 24c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
		lcd_print("mV");
 250:	c8 01       	movw	r24, r16
 252:	0e 94 75 00 	call	0xea	; 0xea <lcd_print>
 256:	d6 cf       	rjmp	.-84     	; 0x204 <main+0x86>

00000258 <__fixunssfsi>:
 258:	70 d0       	rcall	.+224    	; 0x33a <__fp_splitA>
 25a:	88 f0       	brcs	.+34     	; 0x27e <__fixunssfsi+0x26>
 25c:	9f 57       	subi	r25, 0x7F	; 127
 25e:	90 f0       	brcs	.+36     	; 0x284 <__fixunssfsi+0x2c>
 260:	b9 2f       	mov	r27, r25
 262:	99 27       	eor	r25, r25
 264:	b7 51       	subi	r27, 0x17	; 23
 266:	a0 f0       	brcs	.+40     	; 0x290 <__fixunssfsi+0x38>
 268:	d1 f0       	breq	.+52     	; 0x29e <__fixunssfsi+0x46>
 26a:	66 0f       	add	r22, r22
 26c:	77 1f       	adc	r23, r23
 26e:	88 1f       	adc	r24, r24
 270:	99 1f       	adc	r25, r25
 272:	1a f0       	brmi	.+6      	; 0x27a <__fixunssfsi+0x22>
 274:	ba 95       	dec	r27
 276:	c9 f7       	brne	.-14     	; 0x26a <__fixunssfsi+0x12>
 278:	12 c0       	rjmp	.+36     	; 0x29e <__fixunssfsi+0x46>
 27a:	b1 30       	cpi	r27, 0x01	; 1
 27c:	81 f0       	breq	.+32     	; 0x29e <__fixunssfsi+0x46>
 27e:	77 d0       	rcall	.+238    	; 0x36e <__fp_zero>
 280:	b1 e0       	ldi	r27, 0x01	; 1
 282:	08 95       	ret
 284:	74 c0       	rjmp	.+232    	; 0x36e <__fp_zero>
 286:	67 2f       	mov	r22, r23
 288:	78 2f       	mov	r23, r24
 28a:	88 27       	eor	r24, r24
 28c:	b8 5f       	subi	r27, 0xF8	; 248
 28e:	39 f0       	breq	.+14     	; 0x29e <__fixunssfsi+0x46>
 290:	b9 3f       	cpi	r27, 0xF9	; 249
 292:	cc f3       	brlt	.-14     	; 0x286 <__fixunssfsi+0x2e>
 294:	86 95       	lsr	r24
 296:	77 95       	ror	r23
 298:	67 95       	ror	r22
 29a:	b3 95       	inc	r27
 29c:	d9 f7       	brne	.-10     	; 0x294 <__fixunssfsi+0x3c>
 29e:	3e f4       	brtc	.+14     	; 0x2ae <__fixunssfsi+0x56>
 2a0:	90 95       	com	r25
 2a2:	80 95       	com	r24
 2a4:	70 95       	com	r23
 2a6:	61 95       	neg	r22
 2a8:	7f 4f       	sbci	r23, 0xFF	; 255
 2aa:	8f 4f       	sbci	r24, 0xFF	; 255
 2ac:	9f 4f       	sbci	r25, 0xFF	; 255
 2ae:	08 95       	ret

000002b0 <__floatunsisf>:
 2b0:	e8 94       	clt
 2b2:	09 c0       	rjmp	.+18     	; 0x2c6 <__floatsisf+0x12>

000002b4 <__floatsisf>:
 2b4:	97 fb       	bst	r25, 7
 2b6:	3e f4       	brtc	.+14     	; 0x2c6 <__floatsisf+0x12>
 2b8:	90 95       	com	r25
 2ba:	80 95       	com	r24
 2bc:	70 95       	com	r23
 2be:	61 95       	neg	r22
 2c0:	7f 4f       	sbci	r23, 0xFF	; 255
 2c2:	8f 4f       	sbci	r24, 0xFF	; 255
 2c4:	9f 4f       	sbci	r25, 0xFF	; 255
 2c6:	99 23       	and	r25, r25
 2c8:	a9 f0       	breq	.+42     	; 0x2f4 <__floatsisf+0x40>
 2ca:	f9 2f       	mov	r31, r25
 2cc:	96 e9       	ldi	r25, 0x96	; 150
 2ce:	bb 27       	eor	r27, r27
 2d0:	93 95       	inc	r25
 2d2:	f6 95       	lsr	r31
 2d4:	87 95       	ror	r24
 2d6:	77 95       	ror	r23
 2d8:	67 95       	ror	r22
 2da:	b7 95       	ror	r27
 2dc:	f1 11       	cpse	r31, r1
 2de:	f8 cf       	rjmp	.-16     	; 0x2d0 <__floatsisf+0x1c>
 2e0:	fa f4       	brpl	.+62     	; 0x320 <__floatsisf+0x6c>
 2e2:	bb 0f       	add	r27, r27
 2e4:	11 f4       	brne	.+4      	; 0x2ea <__floatsisf+0x36>
 2e6:	60 ff       	sbrs	r22, 0
 2e8:	1b c0       	rjmp	.+54     	; 0x320 <__floatsisf+0x6c>
 2ea:	6f 5f       	subi	r22, 0xFF	; 255
 2ec:	7f 4f       	sbci	r23, 0xFF	; 255
 2ee:	8f 4f       	sbci	r24, 0xFF	; 255
 2f0:	9f 4f       	sbci	r25, 0xFF	; 255
 2f2:	16 c0       	rjmp	.+44     	; 0x320 <__floatsisf+0x6c>
 2f4:	88 23       	and	r24, r24
 2f6:	11 f0       	breq	.+4      	; 0x2fc <__floatsisf+0x48>
 2f8:	96 e9       	ldi	r25, 0x96	; 150
 2fa:	11 c0       	rjmp	.+34     	; 0x31e <__floatsisf+0x6a>
 2fc:	77 23       	and	r23, r23
 2fe:	21 f0       	breq	.+8      	; 0x308 <__floatsisf+0x54>
 300:	9e e8       	ldi	r25, 0x8E	; 142
 302:	87 2f       	mov	r24, r23
 304:	76 2f       	mov	r23, r22
 306:	05 c0       	rjmp	.+10     	; 0x312 <__floatsisf+0x5e>
 308:	66 23       	and	r22, r22
 30a:	71 f0       	breq	.+28     	; 0x328 <__floatsisf+0x74>
 30c:	96 e8       	ldi	r25, 0x86	; 134
 30e:	86 2f       	mov	r24, r22
 310:	70 e0       	ldi	r23, 0x00	; 0
 312:	60 e0       	ldi	r22, 0x00	; 0
 314:	2a f0       	brmi	.+10     	; 0x320 <__floatsisf+0x6c>
 316:	9a 95       	dec	r25
 318:	66 0f       	add	r22, r22
 31a:	77 1f       	adc	r23, r23
 31c:	88 1f       	adc	r24, r24
 31e:	da f7       	brpl	.-10     	; 0x316 <__floatsisf+0x62>
 320:	88 0f       	add	r24, r24
 322:	96 95       	lsr	r25
 324:	87 95       	ror	r24
 326:	97 f9       	bld	r25, 7
 328:	08 95       	ret

0000032a <__fp_split3>:
 32a:	57 fd       	sbrc	r21, 7
 32c:	90 58       	subi	r25, 0x80	; 128
 32e:	44 0f       	add	r20, r20
 330:	55 1f       	adc	r21, r21
 332:	59 f0       	breq	.+22     	; 0x34a <__fp_splitA+0x10>
 334:	5f 3f       	cpi	r21, 0xFF	; 255
 336:	71 f0       	breq	.+28     	; 0x354 <__fp_splitA+0x1a>
 338:	47 95       	ror	r20

0000033a <__fp_splitA>:
 33a:	88 0f       	add	r24, r24
 33c:	97 fb       	bst	r25, 7
 33e:	99 1f       	adc	r25, r25
 340:	61 f0       	breq	.+24     	; 0x35a <__fp_splitA+0x20>
 342:	9f 3f       	cpi	r25, 0xFF	; 255
 344:	79 f0       	breq	.+30     	; 0x364 <__fp_splitA+0x2a>
 346:	87 95       	ror	r24
 348:	08 95       	ret
 34a:	12 16       	cp	r1, r18
 34c:	13 06       	cpc	r1, r19
 34e:	14 06       	cpc	r1, r20
 350:	55 1f       	adc	r21, r21
 352:	f2 cf       	rjmp	.-28     	; 0x338 <__fp_split3+0xe>
 354:	46 95       	lsr	r20
 356:	f1 df       	rcall	.-30     	; 0x33a <__fp_splitA>
 358:	08 c0       	rjmp	.+16     	; 0x36a <__fp_splitA+0x30>
 35a:	16 16       	cp	r1, r22
 35c:	17 06       	cpc	r1, r23
 35e:	18 06       	cpc	r1, r24
 360:	99 1f       	adc	r25, r25
 362:	f1 cf       	rjmp	.-30     	; 0x346 <__fp_splitA+0xc>
 364:	86 95       	lsr	r24
 366:	71 05       	cpc	r23, r1
 368:	61 05       	cpc	r22, r1
 36a:	08 94       	sec
 36c:	08 95       	ret

0000036e <__fp_zero>:
 36e:	e8 94       	clt

00000370 <__fp_szero>:
 370:	bb 27       	eor	r27, r27
 372:	66 27       	eor	r22, r22
 374:	77 27       	eor	r23, r23
 376:	cb 01       	movw	r24, r22
 378:	97 f9       	bld	r25, 7
 37a:	08 95       	ret

0000037c <__mulsf3>:
 37c:	0b d0       	rcall	.+22     	; 0x394 <__mulsf3x>
 37e:	78 c0       	rjmp	.+240    	; 0x470 <__fp_round>
 380:	69 d0       	rcall	.+210    	; 0x454 <__fp_pscA>
 382:	28 f0       	brcs	.+10     	; 0x38e <__mulsf3+0x12>
 384:	6e d0       	rcall	.+220    	; 0x462 <__fp_pscB>
 386:	18 f0       	brcs	.+6      	; 0x38e <__mulsf3+0x12>
 388:	95 23       	and	r25, r21
 38a:	09 f0       	breq	.+2      	; 0x38e <__mulsf3+0x12>
 38c:	5a c0       	rjmp	.+180    	; 0x442 <__fp_inf>
 38e:	5f c0       	rjmp	.+190    	; 0x44e <__fp_nan>
 390:	11 24       	eor	r1, r1
 392:	ee cf       	rjmp	.-36     	; 0x370 <__fp_szero>

00000394 <__mulsf3x>:
 394:	ca df       	rcall	.-108    	; 0x32a <__fp_split3>
 396:	a0 f3       	brcs	.-24     	; 0x380 <__mulsf3+0x4>

00000398 <__mulsf3_pse>:
 398:	95 9f       	mul	r25, r21
 39a:	d1 f3       	breq	.-12     	; 0x390 <__mulsf3+0x14>
 39c:	95 0f       	add	r25, r21
 39e:	50 e0       	ldi	r21, 0x00	; 0
 3a0:	55 1f       	adc	r21, r21
 3a2:	62 9f       	mul	r22, r18
 3a4:	f0 01       	movw	r30, r0
 3a6:	72 9f       	mul	r23, r18
 3a8:	bb 27       	eor	r27, r27
 3aa:	f0 0d       	add	r31, r0
 3ac:	b1 1d       	adc	r27, r1
 3ae:	63 9f       	mul	r22, r19
 3b0:	aa 27       	eor	r26, r26
 3b2:	f0 0d       	add	r31, r0
 3b4:	b1 1d       	adc	r27, r1
 3b6:	aa 1f       	adc	r26, r26
 3b8:	64 9f       	mul	r22, r20
 3ba:	66 27       	eor	r22, r22
 3bc:	b0 0d       	add	r27, r0
 3be:	a1 1d       	adc	r26, r1
 3c0:	66 1f       	adc	r22, r22
 3c2:	82 9f       	mul	r24, r18
 3c4:	22 27       	eor	r18, r18
 3c6:	b0 0d       	add	r27, r0
 3c8:	a1 1d       	adc	r26, r1
 3ca:	62 1f       	adc	r22, r18
 3cc:	73 9f       	mul	r23, r19
 3ce:	b0 0d       	add	r27, r0
 3d0:	a1 1d       	adc	r26, r1
 3d2:	62 1f       	adc	r22, r18
 3d4:	83 9f       	mul	r24, r19
 3d6:	a0 0d       	add	r26, r0
 3d8:	61 1d       	adc	r22, r1
 3da:	22 1f       	adc	r18, r18
 3dc:	74 9f       	mul	r23, r20
 3de:	33 27       	eor	r19, r19
 3e0:	a0 0d       	add	r26, r0
 3e2:	61 1d       	adc	r22, r1
 3e4:	23 1f       	adc	r18, r19
 3e6:	84 9f       	mul	r24, r20
 3e8:	60 0d       	add	r22, r0
 3ea:	21 1d       	adc	r18, r1
 3ec:	82 2f       	mov	r24, r18
 3ee:	76 2f       	mov	r23, r22
 3f0:	6a 2f       	mov	r22, r26
 3f2:	11 24       	eor	r1, r1
 3f4:	9f 57       	subi	r25, 0x7F	; 127
 3f6:	50 40       	sbci	r21, 0x00	; 0
 3f8:	8a f0       	brmi	.+34     	; 0x41c <__mulsf3_pse+0x84>
 3fa:	e1 f0       	breq	.+56     	; 0x434 <__mulsf3_pse+0x9c>
 3fc:	88 23       	and	r24, r24
 3fe:	4a f0       	brmi	.+18     	; 0x412 <__mulsf3_pse+0x7a>
 400:	ee 0f       	add	r30, r30
 402:	ff 1f       	adc	r31, r31
 404:	bb 1f       	adc	r27, r27
 406:	66 1f       	adc	r22, r22
 408:	77 1f       	adc	r23, r23
 40a:	88 1f       	adc	r24, r24
 40c:	91 50       	subi	r25, 0x01	; 1
 40e:	50 40       	sbci	r21, 0x00	; 0
 410:	a9 f7       	brne	.-22     	; 0x3fc <__mulsf3_pse+0x64>
 412:	9e 3f       	cpi	r25, 0xFE	; 254
 414:	51 05       	cpc	r21, r1
 416:	70 f0       	brcs	.+28     	; 0x434 <__mulsf3_pse+0x9c>
 418:	14 c0       	rjmp	.+40     	; 0x442 <__fp_inf>
 41a:	aa cf       	rjmp	.-172    	; 0x370 <__fp_szero>
 41c:	5f 3f       	cpi	r21, 0xFF	; 255
 41e:	ec f3       	brlt	.-6      	; 0x41a <__mulsf3_pse+0x82>
 420:	98 3e       	cpi	r25, 0xE8	; 232
 422:	dc f3       	brlt	.-10     	; 0x41a <__mulsf3_pse+0x82>
 424:	86 95       	lsr	r24
 426:	77 95       	ror	r23
 428:	67 95       	ror	r22
 42a:	b7 95       	ror	r27
 42c:	f7 95       	ror	r31
 42e:	e7 95       	ror	r30
 430:	9f 5f       	subi	r25, 0xFF	; 255
 432:	c1 f7       	brne	.-16     	; 0x424 <__mulsf3_pse+0x8c>
 434:	fe 2b       	or	r31, r30
 436:	88 0f       	add	r24, r24
 438:	91 1d       	adc	r25, r1
 43a:	96 95       	lsr	r25
 43c:	87 95       	ror	r24
 43e:	97 f9       	bld	r25, 7
 440:	08 95       	ret

00000442 <__fp_inf>:
 442:	97 f9       	bld	r25, 7
 444:	9f 67       	ori	r25, 0x7F	; 127
 446:	80 e8       	ldi	r24, 0x80	; 128
 448:	70 e0       	ldi	r23, 0x00	; 0
 44a:	60 e0       	ldi	r22, 0x00	; 0
 44c:	08 95       	ret

0000044e <__fp_nan>:
 44e:	9f ef       	ldi	r25, 0xFF	; 255
 450:	80 ec       	ldi	r24, 0xC0	; 192
 452:	08 95       	ret

00000454 <__fp_pscA>:
 454:	00 24       	eor	r0, r0
 456:	0a 94       	dec	r0
 458:	16 16       	cp	r1, r22
 45a:	17 06       	cpc	r1, r23
 45c:	18 06       	cpc	r1, r24
 45e:	09 06       	cpc	r0, r25
 460:	08 95       	ret

00000462 <__fp_pscB>:
 462:	00 24       	eor	r0, r0
 464:	0a 94       	dec	r0
 466:	12 16       	cp	r1, r18
 468:	13 06       	cpc	r1, r19
 46a:	14 06       	cpc	r1, r20
 46c:	05 06       	cpc	r0, r21
 46e:	08 95       	ret

00000470 <__fp_round>:
 470:	09 2e       	mov	r0, r25
 472:	03 94       	inc	r0
 474:	00 0c       	add	r0, r0
 476:	11 f4       	brne	.+4      	; 0x47c <__fp_round+0xc>
 478:	88 23       	and	r24, r24
 47a:	52 f0       	brmi	.+20     	; 0x490 <__fp_round+0x20>
 47c:	bb 0f       	add	r27, r27
 47e:	40 f4       	brcc	.+16     	; 0x490 <__fp_round+0x20>
 480:	bf 2b       	or	r27, r31
 482:	11 f4       	brne	.+4      	; 0x488 <__fp_round+0x18>
 484:	60 ff       	sbrs	r22, 0
 486:	04 c0       	rjmp	.+8      	; 0x490 <__fp_round+0x20>
 488:	6f 5f       	subi	r22, 0xFF	; 255
 48a:	7f 4f       	sbci	r23, 0xFF	; 255
 48c:	8f 4f       	sbci	r24, 0xFF	; 255
 48e:	9f 4f       	sbci	r25, 0xFF	; 255
 490:	08 95       	ret

00000492 <__udivmodhi4>:
 492:	aa 1b       	sub	r26, r26
 494:	bb 1b       	sub	r27, r27
 496:	51 e1       	ldi	r21, 0x11	; 17
 498:	07 c0       	rjmp	.+14     	; 0x4a8 <__udivmodhi4_ep>

0000049a <__udivmodhi4_loop>:
 49a:	aa 1f       	adc	r26, r26
 49c:	bb 1f       	adc	r27, r27
 49e:	a6 17       	cp	r26, r22
 4a0:	b7 07       	cpc	r27, r23
 4a2:	10 f0       	brcs	.+4      	; 0x4a8 <__udivmodhi4_ep>
 4a4:	a6 1b       	sub	r26, r22
 4a6:	b7 0b       	sbc	r27, r23

000004a8 <__udivmodhi4_ep>:
 4a8:	88 1f       	adc	r24, r24
 4aa:	99 1f       	adc	r25, r25
 4ac:	5a 95       	dec	r21
 4ae:	a9 f7       	brne	.-22     	; 0x49a <__udivmodhi4_loop>
 4b0:	80 95       	com	r24
 4b2:	90 95       	com	r25
 4b4:	bc 01       	movw	r22, r24
 4b6:	cd 01       	movw	r24, r26
 4b8:	08 95       	ret

000004ba <_exit>:
 4ba:	f8 94       	cli

000004bc <__stop_program>:
 4bc:	ff cf       	rjmp	.-2      	; 0x4bc <__stop_program>
