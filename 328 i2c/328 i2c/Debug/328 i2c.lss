
328 i2c.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000366  000003da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000366  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000003dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  00000b30  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000097f  00000000  00000000  00000bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000210  00000000  00000000  0000154f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004c9  00000000  00000000  0000175f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  00001c28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000178  00000000  00000000  00001d38  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002d9  00000000  00000000  00001eb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e6       	ldi	r30, 0x66	; 102
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 11 01 	call	0x222	; 0x222 <main>
  9e:	0c 94 b1 01 	jmp	0x362	; 0x362 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <TWIint>:
#include <util/delay.h>

void TWIint()
{
	
	TWSR=0x00;
  a6:	10 92 b9 00 	sts	0x00B9, r1
	TWBR=18;
  aa:	82 e1       	ldi	r24, 0x12	; 18
  ac:	80 93 b8 00 	sts	0x00B8, r24
	TWCR=0x04;
  b0:	84 e0       	ldi	r24, 0x04	; 4
  b2:	80 93 bc 00 	sts	0x00BC, r24
	
}
  b6:	08 95       	ret

000000b8 <TWIstart>:

void TWIstart()
{
	
	TWCR=0xA4;
  b8:	84 ea       	ldi	r24, 0xA4	; 164
  ba:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & 0x80)==0);
  be:	ec eb       	ldi	r30, 0xBC	; 188
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	88 23       	and	r24, r24
  c6:	ec f7       	brge	.-6      	; 0xc2 <TWIstart+0xa>
	
}
  c8:	08 95       	ret

000000ca <TWIstop>:

void TWIstop()
{
	
	TWCR=0x94;
  ca:	84 e9       	ldi	r24, 0x94	; 148
  cc:	80 93 bc 00 	sts	0x00BC, r24
}
  d0:	08 95       	ret

000000d2 <TWIwrite>:


void TWIwrite(char dat)
{
	
	TWDR=dat;
  d2:	80 93 bb 00 	sts	0x00BB, r24
	TWCR=0x84;
  d6:	84 e8       	ldi	r24, 0x84	; 132
  d8:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & 0x80)==0);
  dc:	ec eb       	ldi	r30, 0xBC	; 188
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	88 23       	and	r24, r24
  e4:	ec f7       	brge	.-6      	; 0xe0 <TWIwrite+0xe>
	
	
}
  e6:	08 95       	ret

000000e8 <TWIreadack>:

char TWIreadack()
{
	TWCR=0xC4;
  e8:	84 ec       	ldi	r24, 0xC4	; 196
  ea:	80 93 bc 00 	sts	0x00BC, r24
	while((TWCR & 0x80)==0);
  ee:	ec eb       	ldi	r30, 0xBC	; 188
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	88 23       	and	r24, r24
  f6:	ec f7       	brge	.-6      	; 0xf2 <TWIreadack+0xa>
	return TWDR;
  f8:	80 91 bb 00 	lds	r24, 0x00BB
	
}
  fc:	08 95       	ret

000000fe <TWIreadnack>:

char TWIreadnack()
{
	TWCR=0x84;
  fe:	84 e8       	ldi	r24, 0x84	; 132
 100:	80 93 bc 00 	sts	0x00BC, r24
	
	while((TWCR & 0x80)==0);
 104:	ec eb       	ldi	r30, 0xBC	; 188
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	88 23       	and	r24, r24
 10c:	ec f7       	brge	.-6      	; 0x108 <TWIreadnack+0xa>
	

	return TWDR;
 10e:	80 91 bb 00 	lds	r24, 0x00BB
	
}
 112:	08 95       	ret

00000114 <RTCwritebyte>:


void RTCwritebyte(char loc,char data)
{
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	d8 2f       	mov	r29, r24
 11a:	c6 2f       	mov	r28, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	8f e3       	ldi	r24, 0x3F	; 63
 11e:	9c e9       	ldi	r25, 0x9C	; 156
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <RTCwritebyte+0xc>
 124:	00 c0       	rjmp	.+0      	; 0x126 <RTCwritebyte+0x12>
 126:	00 00       	nop
	
	_delay_ms(10);
	
	TWIstart();
 128:	0e 94 5c 00 	call	0xb8	; 0xb8 <TWIstart>
	TWIwrite(0xD0);
 12c:	80 ed       	ldi	r24, 0xD0	; 208
 12e:	0e 94 69 00 	call	0xd2	; 0xd2 <TWIwrite>
	TWIwrite(loc);
 132:	8d 2f       	mov	r24, r29
 134:	0e 94 69 00 	call	0xd2	; 0xd2 <TWIwrite>
	TWIwrite(data);
 138:	8c 2f       	mov	r24, r28
 13a:	0e 94 69 00 	call	0xd2	; 0xd2 <TWIwrite>
	
	TWIstop();
 13e:	0e 94 65 00 	call	0xca	; 0xca <TWIstop>

	
}
 142:	df 91       	pop	r29
 144:	cf 91       	pop	r28
 146:	08 95       	ret

00000148 <RTCreadbyte>:


char RTCreadbyte(char loc)
{
 148:	cf 93       	push	r28
 14a:	c8 2f       	mov	r28, r24
 14c:	8f e3       	ldi	r24, 0x3F	; 63
 14e:	9c e9       	ldi	r25, 0x9C	; 156
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <RTCreadbyte+0x8>
 154:	00 c0       	rjmp	.+0      	; 0x156 <RTCreadbyte+0xe>
 156:	00 00       	nop
	
	char edat=0;
	
	_delay_ms(10);
	
	TWIstart();
 158:	0e 94 5c 00 	call	0xb8	; 0xb8 <TWIstart>
	TWIwrite(0xD0);
 15c:	80 ed       	ldi	r24, 0xD0	; 208
 15e:	0e 94 69 00 	call	0xd2	; 0xd2 <TWIwrite>
	TWIwrite(loc);
 162:	8c 2f       	mov	r24, r28
 164:	0e 94 69 00 	call	0xd2	; 0xd2 <TWIwrite>
	TWIstart();
 168:	0e 94 5c 00 	call	0xb8	; 0xb8 <TWIstart>
	TWIwrite(0xD1);
 16c:	81 ed       	ldi	r24, 0xD1	; 209
 16e:	0e 94 69 00 	call	0xd2	; 0xd2 <TWIwrite>
	edat=TWIreadnack();
 172:	0e 94 7f 00 	call	0xfe	; 0xfe <TWIreadnack>
 176:	c8 2f       	mov	r28, r24
	
	TWIstop();
 178:	0e 94 65 00 	call	0xca	; 0xca <TWIstop>
	
	return edat;
}
 17c:	8c 2f       	mov	r24, r28
 17e:	cf 91       	pop	r28
 180:	08 95       	ret

00000182 <lcd_command>:


void lcd_command(char cmd)
{
	
	PORTB&=(~0x01);
 182:	28 98       	cbi	0x05, 0	; 5
	PORTD=cmd;
 184:	8b b9       	out	0x0b, r24	; 11
	PORTB|=0x02;
 186:	29 9a       	sbi	0x05, 1	; 5
 188:	8f e1       	ldi	r24, 0x1F	; 31
 18a:	9e e4       	ldi	r25, 0x4E	; 78
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <lcd_command+0xa>
 190:	00 c0       	rjmp	.+0      	; 0x192 <lcd_command+0x10>
 192:	00 00       	nop
	_delay_ms(5);
	PORTB&=(~0x02);
 194:	29 98       	cbi	0x05, 1	; 5
 196:	8f e1       	ldi	r24, 0x1F	; 31
 198:	9e e4       	ldi	r25, 0x4E	; 78
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_command+0x18>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <lcd_command+0x1e>
 1a0:	00 00       	nop
	_delay_ms(5);
}
 1a2:	08 95       	ret

000001a4 <lcd_data>:


void lcd_data(char data)
{
	
	PORTB|=0x01;
 1a4:	28 9a       	sbi	0x05, 0	; 5
	PORTD=data;
 1a6:	8b b9       	out	0x0b, r24	; 11
	PORTB|=0x02;
 1a8:	29 9a       	sbi	0x05, 1	; 5
 1aa:	8f e1       	ldi	r24, 0x1F	; 31
 1ac:	9e e4       	ldi	r25, 0x4E	; 78
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <lcd_data+0xa>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <lcd_data+0x10>
 1b4:	00 00       	nop
	_delay_ms(5);
	PORTB&=(~0x02);
 1b6:	29 98       	cbi	0x05, 1	; 5
 1b8:	8f e1       	ldi	r24, 0x1F	; 31
 1ba:	9e e4       	ldi	r25, 0x4E	; 78
 1bc:	01 97       	sbiw	r24, 0x01	; 1
 1be:	f1 f7       	brne	.-4      	; 0x1bc <lcd_data+0x18>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <lcd_data+0x1e>
 1c2:	00 00       	nop
	_delay_ms(5);
}
 1c4:	08 95       	ret

000001c6 <lcd_print>:

void lcd_print(char *ptr)
{
 1c6:	cf 93       	push	r28
 1c8:	df 93       	push	r29
 1ca:	ec 01       	movw	r28, r24
	
	while(*ptr!='\0')
 1cc:	88 81       	ld	r24, Y
 1ce:	88 23       	and	r24, r24
 1d0:	31 f0       	breq	.+12     	; 0x1de <lcd_print+0x18>
	_delay_ms(5);
	PORTB&=(~0x02);
	_delay_ms(5);
}

void lcd_print(char *ptr)
 1d2:	21 96       	adiw	r28, 0x01	; 1
{
	
	while(*ptr!='\0')
	{
		
		lcd_data(*ptr);
 1d4:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_data>
}

void lcd_print(char *ptr)
{
	
	while(*ptr!='\0')
 1d8:	89 91       	ld	r24, Y+
 1da:	88 23       	and	r24, r24
 1dc:	d9 f7       	brne	.-10     	; 0x1d4 <lcd_print+0xe>
	{
		
		lcd_data(*ptr);
		ptr++;
	}
}
 1de:	df 91       	pop	r29
 1e0:	cf 91       	pop	r28
 1e2:	08 95       	ret

000001e4 <dtoa>:

void dtoa(unsigned int val,char *buf,char n)
{
 1e4:	cf 93       	push	r28
 1e6:	df 93       	push	r29
 1e8:	eb 01       	movw	r28, r22
	
	buf[n]=0;
 1ea:	fb 01       	movw	r30, r22
 1ec:	e4 0f       	add	r30, r20
 1ee:	f1 1d       	adc	r31, r1
 1f0:	10 82       	st	Z, r1
	while(n-->0)
 1f2:	44 23       	and	r20, r20
 1f4:	99 f0       	breq	.+38     	; 0x21c <dtoa+0x38>
 1f6:	41 50       	subi	r20, 0x01	; 1
	{
		
		buf[n]=(val%10)+'0';
 1f8:	2a e0       	ldi	r18, 0x0A	; 10
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	01 c0       	rjmp	.+2      	; 0x200 <dtoa+0x1c>

void dtoa(unsigned int val,char *buf,char n)
{
	
	buf[n]=0;
	while(n-->0)
 1fe:	45 2f       	mov	r20, r21
	{
		
		buf[n]=(val%10)+'0';
 200:	fe 01       	movw	r30, r28
 202:	e4 0f       	add	r30, r20
 204:	f1 1d       	adc	r31, r1
 206:	b9 01       	movw	r22, r18
 208:	0e 94 9d 01 	call	0x33a	; 0x33a <__udivmodhi4>
 20c:	80 5d       	subi	r24, 0xD0	; 208
 20e:	80 83       	st	Z, r24
		val=val/10;
 210:	86 2f       	mov	r24, r22
 212:	97 2f       	mov	r25, r23

void dtoa(unsigned int val,char *buf,char n)
{
	
	buf[n]=0;
	while(n-->0)
 214:	54 2f       	mov	r21, r20
 216:	51 50       	subi	r21, 0x01	; 1
 218:	44 23       	and	r20, r20
 21a:	89 f7       	brne	.-30     	; 0x1fe <dtoa+0x1a>
	{
		
		buf[n]=(val%10)+'0';
		val=val/10;
	}
}
 21c:	df 91       	pop	r29
 21e:	cf 91       	pop	r28
 220:	08 95       	ret

00000222 <main>:
	UCSRA=0x00;
	UCSRB=0x98;
	UCSRC=0x86;*/
//	sei();

	TWIint();
 222:	0e 94 53 00 	call	0xa6	; 0xa6 <TWIint>
	
	int a=1234;
	char dispbuf[5];
	DDRB=0x03;
 226:	83 e0       	ldi	r24, 0x03	; 3
 228:	84 b9       	out	0x04, r24	; 4
	DDRD=0xFF;
 22a:	8f ef       	ldi	r24, 0xFF	; 255
 22c:	8a b9       	out	0x0a, r24	; 10
 22e:	8f e1       	ldi	r24, 0x1F	; 31
 230:	9e e4       	ldi	r25, 0x4E	; 78
 232:	01 97       	sbiw	r24, 0x01	; 1
 234:	f1 f7       	brne	.-4      	; 0x232 <main+0x10>
 236:	00 c0       	rjmp	.+0      	; 0x238 <main+0x16>
 238:	00 00       	nop
	_delay_ms(5);
	lcd_command(0x30);
 23a:	80 e3       	ldi	r24, 0x30	; 48
 23c:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_command>
 240:	af e1       	ldi	r26, 0x1F	; 31
 242:	be e4       	ldi	r27, 0x4E	; 78
 244:	11 97       	sbiw	r26, 0x01	; 1
 246:	f1 f7       	brne	.-4      	; 0x244 <main+0x22>
 248:	00 c0       	rjmp	.+0      	; 0x24a <main+0x28>
 24a:	00 00       	nop
	_delay_ms(5);
	lcd_command(0x30);
 24c:	80 e3       	ldi	r24, 0x30	; 48
 24e:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_command>
 252:	8f e1       	ldi	r24, 0x1F	; 31
 254:	9e e4       	ldi	r25, 0x4E	; 78
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	f1 f7       	brne	.-4      	; 0x256 <main+0x34>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <main+0x3a>
 25c:	00 00       	nop
	_delay_ms(5);
	lcd_command(0x30);
 25e:	80 e3       	ldi	r24, 0x30	; 48
 260:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_command>
 264:	af e1       	ldi	r26, 0x1F	; 31
 266:	be e4       	ldi	r27, 0x4E	; 78
 268:	11 97       	sbiw	r26, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <main+0x46>
 26c:	00 c0       	rjmp	.+0      	; 0x26e <main+0x4c>
 26e:	00 00       	nop
	_delay_ms(5);
	lcd_command(0x38);
 270:	88 e3       	ldi	r24, 0x38	; 56
 272:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_command>
 276:	8f e1       	ldi	r24, 0x1F	; 31
 278:	9e e4       	ldi	r25, 0x4E	; 78
 27a:	01 97       	sbiw	r24, 0x01	; 1
 27c:	f1 f7       	brne	.-4      	; 0x27a <main+0x58>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <main+0x5e>
 280:	00 00       	nop
	_delay_ms(5);
	lcd_command(0x01);
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_command>
	lcd_command(0x06);
 288:	86 e0       	ldi	r24, 0x06	; 6
 28a:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_command>
	lcd_command(0X0C);
 28e:	8c e0       	ldi	r24, 0x0C	; 12
 290:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_command>
	lcd_command(0x80);
 294:	80 e8       	ldi	r24, 0x80	; 128
 296:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_command>
	//lcd_print("nikhil joseph jo");
	//dtoa(a,dispbuf,4);
	//	lcd_print(dispbuf);
	
	
	RTCwritebyte(0,0x50);
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	60 e5       	ldi	r22, 0x50	; 80
 29e:	0e 94 8a 00 	call	0x114	; 0x114 <RTCwritebyte>
	RTCwritebyte(1,0x36);
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	66 e3       	ldi	r22, 0x36	; 54
 2a6:	0e 94 8a 00 	call	0x114	; 0x114 <RTCwritebyte>
	RTCwritebyte(2,0x21);
 2aa:	82 e0       	ldi	r24, 0x02	; 2
 2ac:	61 e2       	ldi	r22, 0x21	; 33
 2ae:	0e 94 8a 00 	call	0x114	; 0x114 <RTCwritebyte>
	
	
	while(1)
	{
		
		 sec=RTCreadbyte(0);
 2b2:	80 e0       	ldi	r24, 0x00	; 0
 2b4:	0e 94 a4 00 	call	0x148	; 0x148 <RTCreadbyte>
 2b8:	c8 2f       	mov	r28, r24
		 min=RTCreadbyte(1);
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	0e 94 a4 00 	call	0x148	; 0x148 <RTCreadbyte>
 2c0:	d8 2f       	mov	r29, r24
		 hour=RTCreadbyte(2);
 2c2:	82 e0       	ldi	r24, 0x02	; 2
 2c4:	0e 94 a4 00 	call	0x148	; 0x148 <RTCreadbyte>
 2c8:	18 2f       	mov	r17, r24
		 
		 lcd_command(0x01);
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_command>
		 lcd_command(0x80);
 2d0:	80 e8       	ldi	r24, 0x80	; 128
 2d2:	0e 94 c1 00 	call	0x182	; 0x182 <lcd_command>
		 
		 lcd_data(((hour>>4) & 0x03)+'0');
 2d6:	81 2f       	mov	r24, r17
 2d8:	82 95       	swap	r24
 2da:	8f 70       	andi	r24, 0x0F	; 15
 2dc:	83 70       	andi	r24, 0x03	; 3
 2de:	80 5d       	subi	r24, 0xD0	; 208
 2e0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_data>
		 lcd_data(((hour) & 0x0f)+'0');
 2e4:	81 2f       	mov	r24, r17
 2e6:	8f 70       	andi	r24, 0x0F	; 15
 2e8:	80 5d       	subi	r24, 0xD0	; 208
 2ea:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_data>
		 lcd_data(':');
 2ee:	8a e3       	ldi	r24, 0x3A	; 58
 2f0:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_data>
		 
		 lcd_data(((min>>4) & 0x0f)+'0');
 2f4:	8d 2f       	mov	r24, r29
 2f6:	82 95       	swap	r24
 2f8:	8f 70       	andi	r24, 0x0F	; 15
 2fa:	80 5d       	subi	r24, 0xD0	; 208
 2fc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_data>
		 lcd_data(((min) & 0x0f)+'0');          //time in ascii format for uart transmission
 300:	8d 2f       	mov	r24, r29
 302:	8f 70       	andi	r24, 0x0F	; 15
 304:	80 5d       	subi	r24, 0xD0	; 208
 306:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_data>
		 lcd_data(':');
 30a:	8a e3       	ldi	r24, 0x3A	; 58
 30c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_data>
		 
		 lcd_data(((sec>>4) & 0x0f)+'0');
 310:	8c 2f       	mov	r24, r28
 312:	82 95       	swap	r24
 314:	8f 70       	andi	r24, 0x0F	; 15
 316:	80 5d       	subi	r24, 0xD0	; 208
 318:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_data>
		 lcd_data(((sec) & 0x0f)+'0');
 31c:	8c 2f       	mov	r24, r28
 31e:	8f 70       	andi	r24, 0x0F	; 15
 320:	80 5d       	subi	r24, 0xD0	; 208
 322:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_data>
 326:	8f ef       	ldi	r24, 0xFF	; 255
 328:	93 ed       	ldi	r25, 0xD3	; 211
 32a:	a0 e3       	ldi	r26, 0x30	; 48
 32c:	81 50       	subi	r24, 0x01	; 1
 32e:	90 40       	sbci	r25, 0x00	; 0
 330:	a0 40       	sbci	r26, 0x00	; 0
 332:	e1 f7       	brne	.-8      	; 0x32c <main+0x10a>
 334:	00 c0       	rjmp	.+0      	; 0x336 <main+0x114>
 336:	00 00       	nop
 338:	bc cf       	rjmp	.-136    	; 0x2b2 <main+0x90>

0000033a <__udivmodhi4>:
 33a:	aa 1b       	sub	r26, r26
 33c:	bb 1b       	sub	r27, r27
 33e:	51 e1       	ldi	r21, 0x11	; 17
 340:	07 c0       	rjmp	.+14     	; 0x350 <__udivmodhi4_ep>

00000342 <__udivmodhi4_loop>:
 342:	aa 1f       	adc	r26, r26
 344:	bb 1f       	adc	r27, r27
 346:	a6 17       	cp	r26, r22
 348:	b7 07       	cpc	r27, r23
 34a:	10 f0       	brcs	.+4      	; 0x350 <__udivmodhi4_ep>
 34c:	a6 1b       	sub	r26, r22
 34e:	b7 0b       	sbc	r27, r23

00000350 <__udivmodhi4_ep>:
 350:	88 1f       	adc	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	5a 95       	dec	r21
 356:	a9 f7       	brne	.-22     	; 0x342 <__udivmodhi4_loop>
 358:	80 95       	com	r24
 35a:	90 95       	com	r25
 35c:	bc 01       	movw	r22, r24
 35e:	cd 01       	movw	r24, r26
 360:	08 95       	ret

00000362 <_exit>:
 362:	f8 94       	cli

00000364 <__stop_program>:
 364:	ff cf       	rjmp	.-2      	; 0x364 <__stop_program>
