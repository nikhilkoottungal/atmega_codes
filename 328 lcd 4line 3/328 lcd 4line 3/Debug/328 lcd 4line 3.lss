
328 lcd 4line 3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000001f2  00000266  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  00000270  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  0000093c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  000009c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000745  00000000  00000000  00000a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001a2  00000000  00000000  000011ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000426  00000000  00000000  0000134f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  00001778  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000013c  00000000  00000000  000017f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000180  00000000  00000000  00001930  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ef       	ldi	r30, 0xF2	; 242
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 30       	cpi	r26, 0x08	; 8
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a7 00 	call	0x14e	; 0x14e <main>
  9e:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_command>:
#include <util/delay.h>   // enable to pb1 and rs to pb0

void lcd_command(char cmd)
{
	
	PORTB&=(~0x01);
  a6:	28 98       	cbi	0x05, 0	; 5
	
	PORTD=cmd;
  a8:	8b b9       	out	0x0b, r24	; 11
	PORTB|=0x02;
  aa:	29 9a       	sbi	0x05, 1	; 5
	
	PORTB&=(~0x02);
  ac:	29 98       	cbi	0x05, 1	; 5
	
	PORTD=cmd<<4;
  ae:	82 95       	swap	r24
  b0:	80 7f       	andi	r24, 0xF0	; 240
  b2:	8b b9       	out	0x0b, r24	; 11
	PORTB|=0x02;
  b4:	29 9a       	sbi	0x05, 1	; 5

	PORTB&=(~0x02);
  b6:	29 98       	cbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	8f e1       	ldi	r24, 0x1F	; 31
  ba:	9e e4       	ldi	r25, 0x4E	; 78
  bc:	01 97       	sbiw	r24, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <lcd_command+0x16>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <lcd_command+0x1c>
  c2:	00 00       	nop
	_delay_ms(5);
	
}
  c4:	08 95       	ret

000000c6 <lcd_data>:


void lcd_data(char data)
{
	
	PORTB|=0x01;
  c6:	28 9a       	sbi	0x05, 0	; 5
  c8:	ef e1       	ldi	r30, 0x1F	; 31
  ca:	fe e4       	ldi	r31, 0x4E	; 78
  cc:	31 97       	sbiw	r30, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcd_data+0x6>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <lcd_data+0xc>
  d2:	00 00       	nop
	_delay_ms(5);
	
	PORTD=data;
  d4:	8b b9       	out	0x0b, r24	; 11
	
	
	
	PORTB|=0x02;
  d6:	29 9a       	sbi	0x05, 1	; 5
	
	PORTB&=(~0x02);
  d8:	29 98       	cbi	0x05, 1	; 5

	PORTD=data<<4;
  da:	82 95       	swap	r24
  dc:	80 7f       	andi	r24, 0xF0	; 240
  de:	8b b9       	out	0x0b, r24	; 11
	
	PORTB|=0x02;
  e0:	29 9a       	sbi	0x05, 1	; 5

	
	PORTB&=(~0x02);
  e2:	29 98       	cbi	0x05, 1	; 5
  e4:	8f e1       	ldi	r24, 0x1F	; 31
  e6:	9e e4       	ldi	r25, 0x4E	; 78
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <lcd_data+0x22>
  ec:	00 c0       	rjmp	.+0      	; 0xee <lcd_data+0x28>
  ee:	00 00       	nop
	_delay_ms(5);
}
  f0:	08 95       	ret

000000f2 <lcd_print>:

void lcd_print(char *ptr)
{
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	ec 01       	movw	r28, r24
	
	while(*ptr!='\0')
  f8:	88 81       	ld	r24, Y
  fa:	88 23       	and	r24, r24
  fc:	31 f0       	breq	.+12     	; 0x10a <lcd_print+0x18>
	
	PORTB&=(~0x02);
	_delay_ms(5);
}

void lcd_print(char *ptr)
  fe:	21 96       	adiw	r28, 0x01	; 1
{
	
	while(*ptr!='\0')
	{
		
		lcd_data(*ptr);
 100:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_data>
}

void lcd_print(char *ptr)
{
	
	while(*ptr!='\0')
 104:	89 91       	ld	r24, Y+
 106:	88 23       	and	r24, r24
 108:	d9 f7       	brne	.-10     	; 0x100 <lcd_print+0xe>
	{
		
		lcd_data(*ptr);
		ptr++;
	}
}
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <dtoa>:

void dtoa(unsigned int val,char *buf,char n)
{
 110:	cf 93       	push	r28
 112:	df 93       	push	r29
 114:	eb 01       	movw	r28, r22
	
	buf[n]=0;
 116:	fb 01       	movw	r30, r22
 118:	e4 0f       	add	r30, r20
 11a:	f1 1d       	adc	r31, r1
 11c:	10 82       	st	Z, r1
	while(n-->0)
 11e:	44 23       	and	r20, r20
 120:	99 f0       	breq	.+38     	; 0x148 <dtoa+0x38>
 122:	41 50       	subi	r20, 0x01	; 1
	{
		
		buf[n]=(val%10)+'0';
 124:	2a e0       	ldi	r18, 0x0A	; 10
 126:	30 e0       	ldi	r19, 0x00	; 0
 128:	01 c0       	rjmp	.+2      	; 0x12c <dtoa+0x1c>

void dtoa(unsigned int val,char *buf,char n)
{
	
	buf[n]=0;
	while(n-->0)
 12a:	45 2f       	mov	r20, r21
	{
		
		buf[n]=(val%10)+'0';
 12c:	fe 01       	movw	r30, r28
 12e:	e4 0f       	add	r30, r20
 130:	f1 1d       	adc	r31, r1
 132:	b9 01       	movw	r22, r18
 134:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <__udivmodhi4>
 138:	80 5d       	subi	r24, 0xD0	; 208
 13a:	80 83       	st	Z, r24
		val=val/10;
 13c:	86 2f       	mov	r24, r22
 13e:	97 2f       	mov	r25, r23

void dtoa(unsigned int val,char *buf,char n)
{
	
	buf[n]=0;
	while(n-->0)
 140:	54 2f       	mov	r21, r20
 142:	51 50       	subi	r21, 0x01	; 1
 144:	44 23       	and	r20, r20
 146:	89 f7       	brne	.-30     	; 0x12a <dtoa+0x1a>
	{
		
		buf[n]=(val%10)+'0';
		val=val/10;
	}
}
 148:	df 91       	pop	r29
 14a:	cf 91       	pop	r28
 14c:	08 95       	ret

0000014e <main>:
int main(void)
{
	
	int a=1234;
	char dispbuf[5];
	DDRB=0x03;
 14e:	83 e0       	ldi	r24, 0x03	; 3
 150:	84 b9       	out	0x04, r24	; 4
	DDRD=0xFF;
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	8a b9       	out	0x0a, r24	; 10
 156:	8f e1       	ldi	r24, 0x1F	; 31
 158:	9e e4       	ldi	r25, 0x4E	; 78
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	f1 f7       	brne	.-4      	; 0x15a <main+0xc>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <main+0x12>
 160:	00 00       	nop
 162:	8f e1       	ldi	r24, 0x1F	; 31
 164:	9e e4       	ldi	r25, 0x4E	; 78
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <main+0x18>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <main+0x1e>
 16c:	00 00       	nop
 16e:	8f e1       	ldi	r24, 0x1F	; 31
 170:	9e e4       	ldi	r25, 0x4E	; 78
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <main+0x24>
 176:	00 c0       	rjmp	.+0      	; 0x178 <main+0x2a>
 178:	00 00       	nop
	
	_delay_ms(5);

//	PORTD = 0x30;
	_delay_ms(5);
	lcd_command(0x30);
 17a:	80 e3       	ldi	r24, 0x30	; 48
 17c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 180:	8f e1       	ldi	r24, 0x1F	; 31
 182:	9e e4       	ldi	r25, 0x4E	; 78
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <main+0x36>
 188:	00 c0       	rjmp	.+0      	; 0x18a <main+0x3c>
 18a:	00 00       	nop
	_delay_ms(5);
	lcd_command(0x28);
 18c:	88 e2       	ldi	r24, 0x28	; 40
 18e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 192:	8f e1       	ldi	r24, 0x1F	; 31
 194:	9e e4       	ldi	r25, 0x4E	; 78
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <main+0x48>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <main+0x4e>
 19c:	00 00       	nop
	_delay_ms(5);

	lcd_command(0x01);
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
	lcd_command(0x06);
 1a4:	86 e0       	ldi	r24, 0x06	; 6
 1a6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
	lcd_command(0X0c);
 1aa:	8c e0       	ldi	r24, 0x0C	; 12
 1ac:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
	lcd_command(0x80);
 1b0:	80 e8       	ldi	r24, 0x80	; 128
 1b2:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
	
	//functions:    lcd_print( ),   dtoa(xx,dispbuf,n)
	
	
	
lcd_command(0x01);
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
	lcd_print("nikhil");
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	0e 94 79 00 	call	0xf2	; 0xf2 <lcd_print>
 1c4:	ff cf       	rjmp	.-2      	; 0x1c4 <main+0x76>

000001c6 <__udivmodhi4>:
 1c6:	aa 1b       	sub	r26, r26
 1c8:	bb 1b       	sub	r27, r27
 1ca:	51 e1       	ldi	r21, 0x11	; 17
 1cc:	07 c0       	rjmp	.+14     	; 0x1dc <__udivmodhi4_ep>

000001ce <__udivmodhi4_loop>:
 1ce:	aa 1f       	adc	r26, r26
 1d0:	bb 1f       	adc	r27, r27
 1d2:	a6 17       	cp	r26, r22
 1d4:	b7 07       	cpc	r27, r23
 1d6:	10 f0       	brcs	.+4      	; 0x1dc <__udivmodhi4_ep>
 1d8:	a6 1b       	sub	r26, r22
 1da:	b7 0b       	sbc	r27, r23

000001dc <__udivmodhi4_ep>:
 1dc:	88 1f       	adc	r24, r24
 1de:	99 1f       	adc	r25, r25
 1e0:	5a 95       	dec	r21
 1e2:	a9 f7       	brne	.-22     	; 0x1ce <__udivmodhi4_loop>
 1e4:	80 95       	com	r24
 1e6:	90 95       	com	r25
 1e8:	bc 01       	movw	r22, r24
 1ea:	cd 01       	movw	r24, r26
 1ec:	08 95       	ret

000001ee <_exit>:
 1ee:	f8 94       	cli

000001f0 <__stop_program>:
 1f0:	ff cf       	rjmp	.-2      	; 0x1f0 <__stop_program>
