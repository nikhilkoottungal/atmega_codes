
328 lcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  000001f4  00000268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  0000027c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000948  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  000009d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000785  00000000  00000000  00000a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001a2  00000000  00000000  000011f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000043a  00000000  00000000  00001397  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000007c  00000000  00000000  000017d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000011d  00000000  00000000  00001850  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000180  00000000  00000000  0000196d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 ef       	ldi	r30, 0xF4	; 244
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a2 e1       	ldi	r26, 0x12	; 18
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 31       	cpi	r26, 0x12	; 18
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a3 00 	call	0x146	; 0x146 <main>
  9e:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_command>:
#include <util/delay.h>

void lcd_command(char cmd)
{
	
	PORTB&=(~0x01);
  a6:	28 98       	cbi	0x05, 0	; 5
	PORTD=cmd;
  a8:	8b b9       	out	0x0b, r24	; 11
	PORTB|=0x02;
  aa:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ac:	8f e1       	ldi	r24, 0x1F	; 31
  ae:	9e e4       	ldi	r25, 0x4E	; 78
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <lcd_command+0xa>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <lcd_command+0x10>
  b6:	00 00       	nop
	_delay_ms(5);
	PORTB&=(~0x02);
  b8:	29 98       	cbi	0x05, 1	; 5
  ba:	8f e1       	ldi	r24, 0x1F	; 31
  bc:	9e e4       	ldi	r25, 0x4E	; 78
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <lcd_command+0x18>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <lcd_command+0x1e>
  c4:	00 00       	nop
	_delay_ms(5);
}
  c6:	08 95       	ret

000000c8 <lcd_data>:


void lcd_data(char data)
{
	
	PORTB|=0x01;
  c8:	28 9a       	sbi	0x05, 0	; 5
	PORTD=data;
  ca:	8b b9       	out	0x0b, r24	; 11
	PORTB|=0x02;
  cc:	29 9a       	sbi	0x05, 1	; 5
  ce:	8f e1       	ldi	r24, 0x1F	; 31
  d0:	9e e4       	ldi	r25, 0x4E	; 78
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <lcd_data+0xa>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <lcd_data+0x10>
  d8:	00 00       	nop
	_delay_ms(5);
	PORTB&=(~0x02);
  da:	29 98       	cbi	0x05, 1	; 5
  dc:	8f e1       	ldi	r24, 0x1F	; 31
  de:	9e e4       	ldi	r25, 0x4E	; 78
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <lcd_data+0x18>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <lcd_data+0x1e>
  e6:	00 00       	nop
	_delay_ms(5);
}
  e8:	08 95       	ret

000000ea <lcd_print>:

void lcd_print(char *ptr)
{
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	ec 01       	movw	r28, r24
	
	while(*ptr!='\0')
  f0:	88 81       	ld	r24, Y
  f2:	88 23       	and	r24, r24
  f4:	31 f0       	breq	.+12     	; 0x102 <lcd_print+0x18>
	_delay_ms(5);
	PORTB&=(~0x02);
	_delay_ms(5);
}

void lcd_print(char *ptr)
  f6:	21 96       	adiw	r28, 0x01	; 1
{
	
	while(*ptr!='\0')
	{
		
		lcd_data(*ptr);
  f8:	0e 94 64 00 	call	0xc8	; 0xc8 <lcd_data>
}

void lcd_print(char *ptr)
{
	
	while(*ptr!='\0')
  fc:	89 91       	ld	r24, Y+
  fe:	88 23       	and	r24, r24
 100:	d9 f7       	brne	.-10     	; 0xf8 <lcd_print+0xe>
	{
		
		lcd_data(*ptr);
		ptr++;
	}
}
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <dtoa>:

void dtoa(unsigned int val,char *buf,char n)
{
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	eb 01       	movw	r28, r22
	
	buf[n]=0;
 10e:	fb 01       	movw	r30, r22
 110:	e4 0f       	add	r30, r20
 112:	f1 1d       	adc	r31, r1
 114:	10 82       	st	Z, r1
	while(n-->0)
 116:	44 23       	and	r20, r20
 118:	99 f0       	breq	.+38     	; 0x140 <dtoa+0x38>
 11a:	41 50       	subi	r20, 0x01	; 1
	{
		
		buf[n]=(val%10)+'0';
 11c:	2a e0       	ldi	r18, 0x0A	; 10
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	01 c0       	rjmp	.+2      	; 0x124 <dtoa+0x1c>

void dtoa(unsigned int val,char *buf,char n)
{
	
	buf[n]=0;
	while(n-->0)
 122:	45 2f       	mov	r20, r21
	{
		
		buf[n]=(val%10)+'0';
 124:	fe 01       	movw	r30, r28
 126:	e4 0f       	add	r30, r20
 128:	f1 1d       	adc	r31, r1
 12a:	b9 01       	movw	r22, r18
 12c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <__udivmodhi4>
 130:	80 5d       	subi	r24, 0xD0	; 208
 132:	80 83       	st	Z, r24
		val=val/10;
 134:	86 2f       	mov	r24, r22
 136:	97 2f       	mov	r25, r23

void dtoa(unsigned int val,char *buf,char n)
{
	
	buf[n]=0;
	while(n-->0)
 138:	54 2f       	mov	r21, r20
 13a:	51 50       	subi	r21, 0x01	; 1
 13c:	44 23       	and	r20, r20
 13e:	89 f7       	brne	.-30     	; 0x122 <dtoa+0x1a>
	{
		
		buf[n]=(val%10)+'0';
		val=val/10;
	}
}
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <main>:
int main(void)
{
	
	int a=1234;
	char dispbuf[5];
	DDRB=0x03;
 146:	83 e0       	ldi	r24, 0x03	; 3
 148:	84 b9       	out	0x04, r24	; 4
	DDRD=0xFF;
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	8a b9       	out	0x0a, r24	; 10
 14e:	8f e1       	ldi	r24, 0x1F	; 31
 150:	9e e4       	ldi	r25, 0x4E	; 78
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <main+0xc>
 156:	00 c0       	rjmp	.+0      	; 0x158 <main+0x12>
 158:	00 00       	nop
	_delay_ms(5);
	lcd_command(0x30);
 15a:	80 e3       	ldi	r24, 0x30	; 48
 15c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 160:	8f e1       	ldi	r24, 0x1F	; 31
 162:	9e e4       	ldi	r25, 0x4E	; 78
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <main+0x1e>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0x24>
 16a:	00 00       	nop
	_delay_ms(5);
	lcd_command(0x30);
 16c:	80 e3       	ldi	r24, 0x30	; 48
 16e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 172:	8f e1       	ldi	r24, 0x1F	; 31
 174:	9e e4       	ldi	r25, 0x4E	; 78
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <main+0x30>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <main+0x36>
 17c:	00 00       	nop
	_delay_ms(5);
	lcd_command(0x30);
 17e:	80 e3       	ldi	r24, 0x30	; 48
 180:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 184:	8f e1       	ldi	r24, 0x1F	; 31
 186:	9e e4       	ldi	r25, 0x4E	; 78
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <main+0x42>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <main+0x48>
 18e:	00 00       	nop
	_delay_ms(5);
	lcd_command(0x38);
 190:	88 e3       	ldi	r24, 0x38	; 56
 192:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 196:	8f e1       	ldi	r24, 0x1F	; 31
 198:	9e e4       	ldi	r25, 0x4E	; 78
 19a:	01 97       	sbiw	r24, 0x01	; 1
 19c:	f1 f7       	brne	.-4      	; 0x19a <main+0x54>
 19e:	00 c0       	rjmp	.+0      	; 0x1a0 <main+0x5a>
 1a0:	00 00       	nop
	_delay_ms(5);
	lcd_command(0x01);
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
	lcd_command(0x06);
 1a8:	86 e0       	ldi	r24, 0x06	; 6
 1aa:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
	lcd_command(0X0C);
 1ae:	8c e0       	ldi	r24, 0x0C	; 12
 1b0:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
	lcd_command(0x80);
 1b4:	80 e8       	ldi	r24, 0x80	; 128
 1b6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
	//functions:    lcd_print( ),   dtoa(xx,dispbuf,n)
	
	
	//lcd_data('n');

	lcd_print("nikhil joseph jo");
 1ba:	80 e0       	ldi	r24, 0x00	; 0
 1bc:	91 e0       	ldi	r25, 0x01	; 1
 1be:	0e 94 75 00 	call	0xea	; 0xea <lcd_print>
	
	
	
	
	
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	08 95       	ret

000001c8 <__udivmodhi4>:
 1c8:	aa 1b       	sub	r26, r26
 1ca:	bb 1b       	sub	r27, r27
 1cc:	51 e1       	ldi	r21, 0x11	; 17
 1ce:	07 c0       	rjmp	.+14     	; 0x1de <__udivmodhi4_ep>

000001d0 <__udivmodhi4_loop>:
 1d0:	aa 1f       	adc	r26, r26
 1d2:	bb 1f       	adc	r27, r27
 1d4:	a6 17       	cp	r26, r22
 1d6:	b7 07       	cpc	r27, r23
 1d8:	10 f0       	brcs	.+4      	; 0x1de <__udivmodhi4_ep>
 1da:	a6 1b       	sub	r26, r22
 1dc:	b7 0b       	sbc	r27, r23

000001de <__udivmodhi4_ep>:
 1de:	88 1f       	adc	r24, r24
 1e0:	99 1f       	adc	r25, r25
 1e2:	5a 95       	dec	r21
 1e4:	a9 f7       	brne	.-22     	; 0x1d0 <__udivmodhi4_loop>
 1e6:	80 95       	com	r24
 1e8:	90 95       	com	r25
 1ea:	bc 01       	movw	r22, r24
 1ec:	cd 01       	movw	r24, r26
 1ee:	08 95       	ret

000001f0 <_exit>:
 1f0:	f8 94       	cli

000001f2 <__stop_program>:
 1f2:	ff cf       	rjmp	.-2      	; 0x1f2 <__stop_program>
