
328 uart 4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  00000440  000004d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000440  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004b  00800148  00800148  0000051c  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  0000051c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  00000c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000d58  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006c9  00000000  00000000  00000dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001f8  00000000  00000000  000014a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c9  00000000  00000000  00001699  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00001a64  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000017d  00000000  00000000  00001b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000202  00000000  00000000  00001c85  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e4       	ldi	r30, 0x40	; 64
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 34       	cpi	r26, 0x48	; 72
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a8 e4       	ldi	r26, 0x48	; 72
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 39       	cpi	r26, 0x93	; 147
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 3b 01 	call	0x276	; 0x276 <main>
  9e:	0c 94 1e 02 	jmp	0x43c	; 0x43c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_18>:
volatile char flag=0,flag1=0,flag2=0,overflag=0,deleteflag=0;
char com[20],com1[20],com2[20];
char start,start1,start2;
int i=0,j=0,k=0;
ISR(USART_RX_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	8f 93       	push	r24
  b4:	9f 93       	push	r25
  b6:	ef 93       	push	r30
  b8:	ff 93       	push	r31
	
	
	
	value=UDR0;
  ba:	80 91 c6 00 	lds	r24, 0x00C6
  be:	80 93 92 01 	sts	0x0192, r24
	PORTB=0xff;
	_delay_ms(10);
	PORTB=0x00;
	
	*/
	if(start2==0)
  c2:	80 91 68 01 	lds	r24, 0x0168
  c6:	88 23       	and	r24, r24
  c8:	61 f4       	brne	.+24     	; 0xe2 <__vector_18+0x3c>
	{
		
		if(value=='$')
  ca:	80 91 92 01 	lds	r24, 0x0192
  ce:	84 32       	cpi	r24, 0x24	; 36
  d0:	71 f5       	brne	.+92     	; 0x12e <__vector_18+0x88>
		{
			
			start2=1;
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	80 93 68 01 	sts	0x0168, r24
			k=0;
  d8:	10 92 49 01 	sts	0x0149, r1
  dc:	10 92 48 01 	sts	0x0148, r1
  e0:	26 c0       	rjmp	.+76     	; 0x12e <__vector_18+0x88>
		
	}
	else 
	{
		
		if(value=='*')
  e2:	80 91 92 01 	lds	r24, 0x0192
  e6:	8a 32       	cpi	r24, 0x2A	; 42
  e8:	99 f4       	brne	.+38     	; 0x110 <__vector_18+0x6a>
		{
			
			start2=0;
  ea:	10 92 68 01 	sts	0x0168, r1
			
			com2[k]='\0';
  ee:	e0 91 48 01 	lds	r30, 0x0148
  f2:	f0 91 49 01 	lds	r31, 0x0149
  f6:	e7 59       	subi	r30, 0x97	; 151
  f8:	fe 4f       	sbci	r31, 0xFE	; 254
  fa:	10 82       	st	Z, r1
			flag2=1;
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 50 01 	sts	0x0150, r24
			k=0;
 102:	10 92 49 01 	sts	0x0149, r1
 106:	10 92 48 01 	sts	0x0148, r1
			//deleteflag=1;
			overflag=0;
 10a:	10 92 4f 01 	sts	0x014F, r1
 10e:	0f c0       	rjmp	.+30     	; 0x12e <__vector_18+0x88>
		
		
		else
		{
			
			com2[k++]=value;
 110:	80 91 48 01 	lds	r24, 0x0148
 114:	90 91 49 01 	lds	r25, 0x0149
 118:	20 91 92 01 	lds	r18, 0x0192
 11c:	fc 01       	movw	r30, r24
 11e:	e7 59       	subi	r30, 0x97	; 151
 120:	fe 4f       	sbci	r31, 0xFE	; 254
 122:	20 83       	st	Z, r18
 124:	01 96       	adiw	r24, 0x01	; 1
 126:	90 93 49 01 	sts	0x0149, r25
 12a:	80 93 48 01 	sts	0x0148, r24
		}
		
	}
	
	
	if(overflag==0)
 12e:	80 91 4f 01 	lds	r24, 0x014F
 132:	88 23       	and	r24, r24
 134:	09 f0       	breq	.+2      	; 0x138 <__vector_18+0x92>
 136:	71 c0       	rjmp	.+226    	; 0x21a <__vector_18+0x174>
	{
		
	
	 if(start==0)
 138:	80 91 91 01 	lds	r24, 0x0191
 13c:	88 23       	and	r24, r24
 13e:	81 f4       	brne	.+32     	; 0x160 <__vector_18+0xba>
	{
		
		if(value=='R')
 140:	80 91 92 01 	lds	r24, 0x0192
 144:	82 35       	cpi	r24, 0x52	; 82
 146:	89 f5       	brne	.+98     	; 0x1aa <__vector_18+0x104>
		{
			com1[0]='R';
 148:	80 93 7d 01 	sts	0x017D, r24
			start=1;
 14c:	81 e0       	ldi	r24, 0x01	; 1
 14e:	80 93 91 01 	sts	0x0191, r24
			 j=1;
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	90 93 4b 01 	sts	0x014B, r25
 15a:	80 93 4a 01 	sts	0x014A, r24
 15e:	25 c0       	rjmp	.+74     	; 0x1aa <__vector_18+0x104>
		
	}		
	else
	{
		
		if(value=='G')
 160:	80 91 92 01 	lds	r24, 0x0192
 164:	87 34       	cpi	r24, 0x47	; 71
 166:	91 f4       	brne	.+36     	; 0x18c <__vector_18+0xe6>
		{
			
			start=0;
 168:	10 92 91 01 	sts	0x0191, r1
			com1[j++]='G';
 16c:	e0 91 4a 01 	lds	r30, 0x014A
 170:	f0 91 4b 01 	lds	r31, 0x014B
 174:	e3 58       	subi	r30, 0x83	; 131
 176:	fe 4f       	sbci	r31, 0xFE	; 254
 178:	80 83       	st	Z, r24
			com1[j]='\0';
 17a:	11 82       	std	Z+1, r1	; 0x01
			flag=1;
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	80 93 52 01 	sts	0x0152, r24
			j=0;
 182:	10 92 4b 01 	sts	0x014B, r1
 186:	10 92 4a 01 	sts	0x014A, r1
 18a:	0f c0       	rjmp	.+30     	; 0x1aa <__vector_18+0x104>
		
		
		else
		{
			
			com1[j++]=value;
 18c:	80 91 4a 01 	lds	r24, 0x014A
 190:	90 91 4b 01 	lds	r25, 0x014B
 194:	20 91 92 01 	lds	r18, 0x0192
 198:	fc 01       	movw	r30, r24
 19a:	e3 58       	subi	r30, 0x83	; 131
 19c:	fe 4f       	sbci	r31, 0xFE	; 254
 19e:	20 83       	st	Z, r18
 1a0:	01 96       	adiw	r24, 0x01	; 1
 1a2:	90 93 4b 01 	sts	0x014B, r25
 1a6:	80 93 4a 01 	sts	0x014A, r24
	}
	
	
	

	if(start1==0)
 1aa:	80 91 53 01 	lds	r24, 0x0153
 1ae:	88 23       	and	r24, r24
 1b0:	81 f4       	brne	.+32     	; 0x1d2 <__vector_18+0x12c>
	{
		
		if(value=='C')
 1b2:	80 91 92 01 	lds	r24, 0x0192
 1b6:	83 34       	cpi	r24, 0x43	; 67
 1b8:	81 f5       	brne	.+96     	; 0x21a <__vector_18+0x174>
		{
			com[0]='C';
 1ba:	80 93 54 01 	sts	0x0154, r24
			start1=1;
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	80 93 53 01 	sts	0x0153, r24
			i=1;
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	90 93 4d 01 	sts	0x014D, r25
 1cc:	80 93 4c 01 	sts	0x014C, r24
 1d0:	24 c0       	rjmp	.+72     	; 0x21a <__vector_18+0x174>
		
	}
	else
	{
		
		if(value=='\r')
 1d2:	80 91 92 01 	lds	r24, 0x0192
 1d6:	8d 30       	cpi	r24, 0x0D	; 13
 1d8:	89 f4       	brne	.+34     	; 0x1fc <__vector_18+0x156>
		{
			
			start1=0;
 1da:	10 92 53 01 	sts	0x0153, r1
			
			com[i]='\0';
 1de:	e0 91 4c 01 	lds	r30, 0x014C
 1e2:	f0 91 4d 01 	lds	r31, 0x014D
 1e6:	ec 5a       	subi	r30, 0xAC	; 172
 1e8:	fe 4f       	sbci	r31, 0xFE	; 254
 1ea:	10 82       	st	Z, r1
			flag1=1;
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	80 93 51 01 	sts	0x0151, r24
			i=0;
 1f2:	10 92 4d 01 	sts	0x014D, r1
 1f6:	10 92 4c 01 	sts	0x014C, r1
 1fa:	0f c0       	rjmp	.+30     	; 0x21a <__vector_18+0x174>
		
		
		else
		{
			
			com[i++]=value;
 1fc:	80 91 4c 01 	lds	r24, 0x014C
 200:	90 91 4d 01 	lds	r25, 0x014D
 204:	20 91 92 01 	lds	r18, 0x0192
 208:	fc 01       	movw	r30, r24
 20a:	ec 5a       	subi	r30, 0xAC	; 172
 20c:	fe 4f       	sbci	r31, 0xFE	; 254
 20e:	20 83       	st	Z, r18
 210:	01 96       	adiw	r24, 0x01	; 1
 212:	90 93 4d 01 	sts	0x014D, r25
 216:	80 93 4c 01 	sts	0x014C, r24
	
 
	
	

}
 21a:	ff 91       	pop	r31
 21c:	ef 91       	pop	r30
 21e:	9f 91       	pop	r25
 220:	8f 91       	pop	r24
 222:	2f 91       	pop	r18
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <send_char>:


void send_char(volatile unsigned char c)
{
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	0f 92       	push	r0
 234:	cd b7       	in	r28, 0x3d	; 61
 236:	de b7       	in	r29, 0x3e	; 62
 238:	89 83       	std	Y+1, r24	; 0x01
	
	UCSR0A=0x40;
 23a:	80 e4       	ldi	r24, 0x40	; 64
 23c:	80 93 c0 00 	sts	0x00C0, r24
	UDR0=c;
 240:	89 81       	ldd	r24, Y+1	; 0x01
 242:	80 93 c6 00 	sts	0x00C6, r24
	while((UCSR0A & 0x40)==0);
 246:	e0 ec       	ldi	r30, 0xC0	; 192
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	80 81       	ld	r24, Z
 24c:	86 ff       	sbrs	r24, 6
 24e:	fd cf       	rjmp	.-6      	; 0x24a <send_char+0x1c>
}
 250:	0f 90       	pop	r0
 252:	df 91       	pop	r29
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <prints>:



void prints(char *ptr)
{
 258:	cf 93       	push	r28
 25a:	df 93       	push	r29
 25c:	ec 01       	movw	r28, r24
	
	while(*ptr)
 25e:	88 81       	ld	r24, Y
 260:	88 23       	and	r24, r24
 262:	31 f0       	breq	.+12     	; 0x270 <prints+0x18>
	while((UCSR0A & 0x40)==0);
}



void prints(char *ptr)
 264:	21 96       	adiw	r28, 0x01	; 1
{
	
	while(*ptr)
	{
		
		send_char(*ptr);
 266:	0e 94 17 01 	call	0x22e	; 0x22e <send_char>


void prints(char *ptr)
{
	
	while(*ptr)
 26a:	89 91       	ld	r24, Y+
 26c:	88 23       	and	r24, r24
 26e:	d9 f7       	brne	.-10     	; 0x266 <prints+0xe>
	{
		
		send_char(*ptr);
		ptr++;
	}
}
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	08 95       	ret

00000276 <main>:




int main(void)
{
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	00 d0       	rcall	.+0      	; 0x27c <main+0x6>
 27c:	00 d0       	rcall	.+0      	; 0x27e <main+0x8>
 27e:	cd b7       	in	r28, 0x3d	; 61
 280:	de b7       	in	r29, 0x3e	; 62
	
	int len=0;
	DDRB=0xff;
 282:	8f ef       	ldi	r24, 0xFF	; 255
 284:	84 b9       	out	0x04, r24	; 4
	float a=0;
	char dispbuf[5];
	UBRR0H=0;
 286:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L=103;
 28a:	97 e6       	ldi	r25, 0x67	; 103
 28c:	90 93 c4 00 	sts	0x00C4, r25
	
	UCSR0A=0x80;
 290:	90 e8       	ldi	r25, 0x80	; 128
 292:	90 93 c0 00 	sts	0x00C0, r25
	UCSR0B=0x98;
 296:	98 e9       	ldi	r25, 0x98	; 152
 298:	90 93 c1 00 	sts	0x00C1, r25
	UCSR0C=0x06;
 29c:	96 e0       	ldi	r25, 0x06	; 6
 29e:	90 93 c2 00 	sts	0x00C2, r25
	sei();
 2a2:	78 94       	sei
	
	DDRB=0xff;
 2a4:	84 b9       	out	0x04, r24	; 4
	
	
	lcd_command(0x80);
	lcd_print("njj");*/
	
	prints("AT\r\n");
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	0e 94 2c 01 	call	0x258	; 0x258 <prints>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ae:	8f ef       	ldi	r24, 0xFF	; 255
 2b0:	97 ea       	ldi	r25, 0xA7	; 167
 2b2:	a1 e6       	ldi	r26, 0x61	; 97
 2b4:	81 50       	subi	r24, 0x01	; 1
 2b6:	90 40       	sbci	r25, 0x00	; 0
 2b8:	a0 40       	sbci	r26, 0x00	; 0
 2ba:	e1 f7       	brne	.-8      	; 0x2b4 <main+0x3e>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <main+0x48>
 2be:	00 00       	nop
	_delay_ms(2000);
	prints("ATE0\r\n");  //the code below is to send the message to any number
 2c0:	85 e0       	ldi	r24, 0x05	; 5
 2c2:	91 e0       	ldi	r25, 0x01	; 1
 2c4:	0e 94 2c 01 	call	0x258	; 0x258 <prints>
 2c8:	8f ef       	ldi	r24, 0xFF	; 255
 2ca:	97 ea       	ldi	r25, 0xA7	; 167
 2cc:	a1 e6       	ldi	r26, 0x61	; 97
 2ce:	81 50       	subi	r24, 0x01	; 1
 2d0:	90 40       	sbci	r25, 0x00	; 0
 2d2:	a0 40       	sbci	r26, 0x00	; 0
 2d4:	e1 f7       	brne	.-8      	; 0x2ce <main+0x58>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <main+0x62>
 2d8:	00 00       	nop
	prints("new message");
	
	_delay_ms(2000);
	send_char(0x1A);*/

prints("AT+CNMI=2,1,0,0,0\r\n");
 2da:	8c e0       	ldi	r24, 0x0C	; 12
 2dc:	91 e0       	ldi	r25, 0x01	; 1
 2de:	0e 94 2c 01 	call	0x258	; 0x258 <prints>


int main(void)
{
	
	int len=0;
 2e2:	00 e0       	ldi	r16, 0x00	; 0
 2e4:	10 e0       	ldi	r17, 0x00	; 0
			if(flag==1)           //flag 1 loop is used to detect RING and to attend the call
			{
		//	lcd_command(0xc0);
			
		//	lcd_print(com1);
				if(strcmp(com1,"RING")==0)
 2e6:	0f 2e       	mov	r0, r31
 2e8:	fd e7       	ldi	r31, 0x7D	; 125
 2ea:	af 2e       	mov	r10, r31
 2ec:	f1 e0       	ldi	r31, 0x01	; 1
 2ee:	bf 2e       	mov	r11, r31
 2f0:	f0 2d       	mov	r31, r0
 2f2:	0f 2e       	mov	r0, r31
 2f4:	f0 e2       	ldi	r31, 0x20	; 32
 2f6:	8f 2e       	mov	r8, r31
 2f8:	f1 e0       	ldi	r31, 0x01	; 1
 2fa:	9f 2e       	mov	r9, r31
 2fc:	f0 2d       	mov	r31, r0
			
			
			if(flag1==1)
			{
				                  //flag used for blocking other loops while printing the message
				len=strlen(com);
 2fe:	0f 2e       	mov	r0, r31
 300:	f4 e5       	ldi	r31, 0x54	; 84
 302:	ef 2e       	mov	r14, r31
 304:	f1 e0       	ldi	r31, 0x01	; 1
 306:	ff 2e       	mov	r15, r31
 308:	f0 2d       	mov	r31, r0
					prints("\r\n");
					
				}				
				
				
				if((strcmp(com,"CARRIER")))
 30a:	0f 2e       	mov	r0, r31
 30c:	f7 e3       	ldi	r31, 0x37	; 55
 30e:	4f 2e       	mov	r4, r31
 310:	f1 e0       	ldi	r31, 0x01	; 1
 312:	5f 2e       	mov	r5, r31
 314:	f0 2d       	mov	r31, r0
				prints("\r\n");
				}
				else
				{
					
					prints("AT+CMGR=");
 316:	0f 2e       	mov	r0, r31
 318:	fb e2       	ldi	r31, 0x2B	; 43
 31a:	2f 2e       	mov	r2, r31
 31c:	f1 e0       	ldi	r31, 0x01	; 1
 31e:	3f 2e       	mov	r3, r31
 320:	f0 2d       	mov	r31, r0
					send_char(com[len]);
					prints("\r\n");
 322:	0f 2e       	mov	r0, r31
 324:	f4 e3       	ldi	r31, 0x34	; 52
 326:	cf 2e       	mov	r12, r31
 328:	f1 e0       	ldi	r31, 0x01	; 1
 32a:	df 2e       	mov	r13, r31
 32c:	f0 2d       	mov	r31, r0
				{
					
				
				prints("AT+CMGR=");
				send_char(com[len-1]);
				send_char(com[len]);
 32e:	d7 01       	movw	r26, r14
 330:	1c 96       	adiw	r26, 0x0c	; 12
 332:	ba 83       	std	Y+2, r27	; 0x02
 334:	a9 83       	std	Y+1, r26	; 0x01
				
			//	lcd_print(com2);
			//	prints(com2);
			
			
			prints("AT+CMGD=");        //for deleting the message that is once recieved
 336:	0f 2e       	mov	r0, r31
 338:	ff e3       	ldi	r31, 0x3F	; 63
 33a:	6f 2e       	mov	r6, r31
 33c:	f1 e0       	ldi	r31, 0x01	; 1
 33e:	7f 2e       	mov	r7, r31
 340:	f0 2d       	mov	r31, r0
	
	
    while(1)
    {
    
			if(flag==1)           //flag 1 loop is used to detect RING and to attend the call
 342:	80 91 52 01 	lds	r24, 0x0152
 346:	81 30       	cpi	r24, 0x01	; 1
 348:	79 f4       	brne	.+30     	; 0x368 <main+0xf2>
			{
		//	lcd_command(0xc0);
			
		//	lcd_print(com1);
				if(strcmp(com1,"RING")==0)
 34a:	c5 01       	movw	r24, r10
 34c:	b4 01       	movw	r22, r8
 34e:	0e 94 15 02 	call	0x42a	; 0x42a <strcmp>
 352:	28 2f       	mov	r18, r24
 354:	39 2f       	mov	r19, r25
 356:	21 15       	cp	r18, r1
 358:	31 05       	cpc	r19, r1
 35a:	21 f4       	brne	.+8      	; 0x364 <main+0xee>
				
				/*PORTB|=0xf0;
				_delay_ms(100);
				PORTB&=~0xf0;
				_delay_ms(100);*/
				prints("ATA\r\n");
 35c:	85 e2       	ldi	r24, 0x25	; 37
 35e:	91 e0       	ldi	r25, 0x01	; 1
 360:	0e 94 2c 01 	call	0x258	; 0x258 <prints>
			
				
				}		
				
				flag = 0 ;		
 364:	10 92 52 01 	sts	0x0152, r1
						
			}
			
			
			if(flag1==1)
 368:	80 91 51 01 	lds	r24, 0x0151
 36c:	81 30       	cpi	r24, 0x01	; 1
 36e:	09 f0       	breq	.+2      	; 0x372 <main+0xfc>
 370:	48 c0       	rjmp	.+144    	; 0x402 <main+0x18c>
			{
				                  //flag used for blocking other loops while printing the message
				len=strlen(com);
 372:	f7 01       	movw	r30, r14
 374:	01 90       	ld	r0, Z+
 376:	00 20       	and	r0, r0
 378:	e9 f7       	brne	.-6      	; 0x374 <main+0xfe>
 37a:	31 97       	sbiw	r30, 0x01	; 1
 37c:	cf 01       	movw	r24, r30
 37e:	8e 19       	sub	r24, r14
 380:	9f 09       	sbc	r25, r15
 382:	9c 83       	std	Y+4, r25	; 0x04
 384:	8b 83       	std	Y+3, r24	; 0x03
				
			//	lcd_print(com);           //com contains the message location number in the sim
			//	lcd_command(0x85);
				
			//	lcd_print(dispbuf);        //these display functions are used to check the accuracy while programming
				len=len-1;
 386:	8c 01       	movw	r16, r24
 388:	01 50       	subi	r16, 0x01	; 1
 38a:	10 40       	sbci	r17, 0x00	; 0
 38c:	8f ef       	ldi	r24, 0xFF	; 255
 38e:	9b e7       	ldi	r25, 0x7B	; 123
 390:	a2 e9       	ldi	r26, 0x92	; 146
 392:	81 50       	subi	r24, 0x01	; 1
 394:	90 40       	sbci	r25, 0x00	; 0
 396:	a0 40       	sbci	r26, 0x00	; 0
 398:	e1 f7       	brne	.-8      	; 0x392 <main+0x11c>
 39a:	00 c0       	rjmp	.+0      	; 0x39c <main+0x126>
 39c:	00 00       	nop
			//	lcd_data(com[len]);
				
				_delay_ms(3000);
				
				//to open the recieved specified message having location number as stored in 'com[len]'
				if(len==12)
 39e:	0c 30       	cpi	r16, 0x0C	; 12
 3a0:	11 05       	cpc	r17, r1
 3a2:	a9 f4       	brne	.+42     	; 0x3ce <main+0x158>
				{
					
				
				prints("AT+CMGR=");
 3a4:	c1 01       	movw	r24, r2
 3a6:	0e 94 2c 01 	call	0x258	; 0x258 <prints>
				send_char(com[len-1]);
 3aa:	8b 81       	ldd	r24, Y+3	; 0x03
 3ac:	9c 81       	ldd	r25, Y+4	; 0x04
 3ae:	8e 0d       	add	r24, r14
 3b0:	9f 1d       	adc	r25, r15
 3b2:	02 97       	sbiw	r24, 0x02	; 2
 3b4:	dc 01       	movw	r26, r24
 3b6:	8c 91       	ld	r24, X
 3b8:	0e 94 17 01 	call	0x22e	; 0x22e <send_char>
				send_char(com[len]);
 3bc:	e9 81       	ldd	r30, Y+1	; 0x01
 3be:	fa 81       	ldd	r31, Y+2	; 0x02
 3c0:	80 81       	ld	r24, Z
 3c2:	0e 94 17 01 	call	0x22e	; 0x22e <send_char>
				prints("\r\n");
 3c6:	c6 01       	movw	r24, r12
 3c8:	0e 94 2c 01 	call	0x258	; 0x258 <prints>
 3cc:	0c c0       	rjmp	.+24     	; 0x3e6 <main+0x170>
				}
				else
				{
					
					prints("AT+CMGR=");
 3ce:	c1 01       	movw	r24, r2
 3d0:	0e 94 2c 01 	call	0x258	; 0x258 <prints>
					send_char(com[len]);
 3d4:	f7 01       	movw	r30, r14
 3d6:	e0 0f       	add	r30, r16
 3d8:	f1 1f       	adc	r31, r17
 3da:	80 81       	ld	r24, Z
 3dc:	0e 94 17 01 	call	0x22e	; 0x22e <send_char>
					prints("\r\n");
 3e0:	c6 01       	movw	r24, r12
 3e2:	0e 94 2c 01 	call	0x258	; 0x258 <prints>
					
				}				
				
				
				if((strcmp(com,"CARRIER")))
 3e6:	c7 01       	movw	r24, r14
 3e8:	b2 01       	movw	r22, r4
 3ea:	0e 94 15 02 	call	0x42a	; 0x42a <strcmp>
 3ee:	28 2f       	mov	r18, r24
 3f0:	39 2f       	mov	r19, r25
 3f2:	21 15       	cp	r18, r1
 3f4:	31 05       	cpc	r19, r1
 3f6:	19 f0       	breq	.+6      	; 0x3fe <main+0x188>
				{
					
				//when call is recieved by gsm a msg'CARRIER'is sent back which sets the overflow flag unnecessarily to avoid tat if loop is used
				overflag=1;  
 3f8:	f1 e0       	ldi	r31, 0x01	; 1
 3fa:	f0 93 4f 01 	sts	0x014F, r31
				}				
				flag1 = 0 ;
 3fe:	10 92 51 01 	sts	0x0151, r1
			
			
			
			
			
			if(flag2==1)                     //com2 contains the message to be displayed
 402:	80 91 50 01 	lds	r24, 0x0150
 406:	81 30       	cpi	r24, 0x01	; 1
 408:	09 f0       	breq	.+2      	; 0x40c <main+0x196>
 40a:	9b cf       	rjmp	.-202    	; 0x342 <main+0xcc>
				
			//	lcd_print(com2);
			//	prints(com2);
			
			
			prints("AT+CMGD=");        //for deleting the message that is once recieved
 40c:	c3 01       	movw	r24, r6
 40e:	0e 94 2c 01 	call	0x258	; 0x258 <prints>
			send_char(com[len]);
 412:	f7 01       	movw	r30, r14
 414:	e0 0f       	add	r30, r16
 416:	f1 1f       	adc	r31, r17
 418:	80 81       	ld	r24, Z
 41a:	0e 94 17 01 	call	0x22e	; 0x22e <send_char>
			prints("\r\n");
 41e:	c6 01       	movw	r24, r12
 420:	0e 94 2c 01 	call	0x258	; 0x258 <prints>
			
			
	//	deleteflag=0;		
		flag2 = 0 ;
 424:	10 92 50 01 	sts	0x0150, r1
 428:	8c cf       	rjmp	.-232    	; 0x342 <main+0xcc>

0000042a <strcmp>:
 42a:	fb 01       	movw	r30, r22
 42c:	dc 01       	movw	r26, r24
 42e:	8d 91       	ld	r24, X+
 430:	01 90       	ld	r0, Z+
 432:	80 19       	sub	r24, r0
 434:	01 10       	cpse	r0, r1
 436:	d9 f3       	breq	.-10     	; 0x42e <strcmp+0x4>
 438:	99 0b       	sbc	r25, r25
 43a:	08 95       	ret

0000043c <_exit>:
 43c:	f8 94       	cli

0000043e <__stop_program>:
 43e:	ff cf       	rjmp	.-2      	; 0x43e <__stop_program>
