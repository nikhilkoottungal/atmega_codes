
varghese test 4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000050c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  0000050c  000005a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000004d  008000a2  008000a2  000005e2  2**0
                  ALLOC
  3 .stab         00000750  00000000  00000000  000005e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000000e7  00000000  00000000  00000d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000000a0  00000000  00000000  00000e20  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a5c  00000000  00000000  00000ec0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000243  00000000  00000000  0000191c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004bf  00000000  00000000  00001b5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  00002020  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001ab  00000000  00000000  00002128  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000325  00000000  00000000  000022d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 a0 00 	jmp	0x140	; 0x140 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e0       	ldi	r30, 0x0C	; 12
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3a       	cpi	r26, 0xA2	; 162
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a2 ea       	ldi	r26, 0xA2	; 162
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 3e       	cpi	r26, 0xEF	; 239
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 08 02 	call	0x410	; 0x410 <main>
  8a:	0c 94 84 02 	jmp	0x508	; 0x508 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <lcd_command>:


void lcd_command(char cmd)
{
	
	PORTB&=(~0x03);
  92:	98 b3       	in	r25, 0x18	; 24
  94:	9c 7f       	andi	r25, 0xFC	; 252
  96:	98 bb       	out	0x18, r25	; 24
	
	PORTC=cmd;
  98:	85 bb       	out	0x15, r24	; 21
	PORTB|=0x04;
  9a:	c2 9a       	sbi	0x18, 2	; 24
	PORTB&=(~0x04);
  9c:	c2 98       	cbi	0x18, 2	; 24
	PORTC=cmd<<4;
  9e:	82 95       	swap	r24
  a0:	80 7f       	andi	r24, 0xF0	; 240
  a2:	85 bb       	out	0x15, r24	; 21
	PORTB|=0x04;
  a4:	c2 9a       	sbi	0x18, 2	; 24
	PORTB&=(~0x04);
  a6:	c2 98       	cbi	0x18, 2	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a8:	8f e1       	ldi	r24, 0x1F	; 31
  aa:	9e e4       	ldi	r25, 0x4E	; 78
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <lcd_command+0x1a>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <lcd_command+0x20>
  b2:	00 00       	nop
	_delay_ms(5);
	
}
  b4:	08 95       	ret

000000b6 <lcd_data>:


void lcd_data(char data)
{
	
	PORTB|=0x01;
  b6:	c0 9a       	sbi	0x18, 0	; 24
	PORTB&=(~0x02);
  b8:	c1 98       	cbi	0x18, 1	; 24
	
	PORTC=data;
  ba:	85 bb       	out	0x15, r24	; 21
	PORTB|=0x04;
  bc:	c2 9a       	sbi	0x18, 2	; 24
	PORTB&=(~0x04);
  be:	c2 98       	cbi	0x18, 2	; 24
	
	PORTC=data<<4;
  c0:	82 95       	swap	r24
  c2:	80 7f       	andi	r24, 0xF0	; 240
  c4:	85 bb       	out	0x15, r24	; 21
	PORTB|=0x04;
  c6:	c2 9a       	sbi	0x18, 2	; 24
  c8:	8f e1       	ldi	r24, 0x1F	; 31
  ca:	9e e4       	ldi	r25, 0x4E	; 78
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <lcd_data+0x16>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <lcd_data+0x1c>
  d2:	00 00       	nop
	_delay_ms(5);
	PORTB&=(~0x04);
  d4:	c2 98       	cbi	0x18, 2	; 24
  d6:	8f e1       	ldi	r24, 0x1F	; 31
  d8:	9e e4       	ldi	r25, 0x4E	; 78
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <lcd_data+0x24>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <lcd_data+0x2a>
  e0:	00 00       	nop
	_delay_ms(5);
}
  e2:	08 95       	ret

000000e4 <lcd_print>:

void lcd_print(char *ptr)
{
  e4:	cf 93       	push	r28
  e6:	df 93       	push	r29
  e8:	ec 01       	movw	r28, r24
	
	while(*ptr!='\0')
  ea:	88 81       	ld	r24, Y
  ec:	88 23       	and	r24, r24
  ee:	31 f0       	breq	.+12     	; 0xfc <lcd_print+0x18>
	_delay_ms(5);
	PORTB&=(~0x04);
	_delay_ms(5);
}

void lcd_print(char *ptr)
  f0:	21 96       	adiw	r28, 0x01	; 1
{
	
	while(*ptr!='\0')
	{
		
		lcd_data(*ptr);
  f2:	0e 94 5b 00 	call	0xb6	; 0xb6 <lcd_data>
}

void lcd_print(char *ptr)
{
	
	while(*ptr!='\0')
  f6:	89 91       	ld	r24, Y+
  f8:	88 23       	and	r24, r24
  fa:	d9 f7       	brne	.-10     	; 0xf2 <lcd_print+0xe>
	{
		
		lcd_data(*ptr);
		ptr++;
	}
}
  fc:	df 91       	pop	r29
  fe:	cf 91       	pop	r28
 100:	08 95       	ret

00000102 <dtoa>:

void dtoa(unsigned int val,char *buf,char n)
{
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	eb 01       	movw	r28, r22
	
	buf[n]=0;
 108:	fb 01       	movw	r30, r22
 10a:	e4 0f       	add	r30, r20
 10c:	f1 1d       	adc	r31, r1
 10e:	10 82       	st	Z, r1
	while(n-->0)
 110:	44 23       	and	r20, r20
 112:	99 f0       	breq	.+38     	; 0x13a <dtoa+0x38>
 114:	41 50       	subi	r20, 0x01	; 1
	{
		
		buf[n]=(val%10)+'0';
 116:	2a e0       	ldi	r18, 0x0A	; 10
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	01 c0       	rjmp	.+2      	; 0x11e <dtoa+0x1c>

void dtoa(unsigned int val,char *buf,char n)
{
	
	buf[n]=0;
	while(n-->0)
 11c:	45 2f       	mov	r20, r21
	{
		
		buf[n]=(val%10)+'0';
 11e:	fe 01       	movw	r30, r28
 120:	e4 0f       	add	r30, r20
 122:	f1 1d       	adc	r31, r1
 124:	b9 01       	movw	r22, r18
 126:	0e 94 67 02 	call	0x4ce	; 0x4ce <__udivmodhi4>
 12a:	80 5d       	subi	r24, 0xD0	; 208
 12c:	80 83       	st	Z, r24
		val=val/10;
 12e:	86 2f       	mov	r24, r22
 130:	97 2f       	mov	r25, r23

void dtoa(unsigned int val,char *buf,char n)
{
	
	buf[n]=0;
	while(n-->0)
 132:	54 2f       	mov	r21, r20
 134:	51 50       	subi	r21, 0x01	; 1
 136:	44 23       	and	r20, r20
 138:	89 f7       	brne	.-30     	; 0x11c <dtoa+0x1a>
	{
		
		buf[n]=(val%10)+'0';
		val=val/10;
	}
}
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <__vector_13>:
volatile char flag=0,flag1=0,flag2=0,overflag=0,deleteflag=0;
char com[20],com1[20],com2[20];
char start,start1,start2;
int i=0,j=0,k=0;
ISR(USART_RXC_vect)
{
 140:	1f 92       	push	r1
 142:	0f 92       	push	r0
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	0f 92       	push	r0
 148:	11 24       	eor	r1, r1
 14a:	2f 93       	push	r18
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
 150:	ef 93       	push	r30
 152:	ff 93       	push	r31
	value=UDR;
 154:	8c b1       	in	r24, 0x0c	; 12
 156:	80 93 ee 00 	sts	0x00EE, r24
	if(start2==0)
 15a:	80 91 c4 00 	lds	r24, 0x00C4
 15e:	88 23       	and	r24, r24
 160:	61 f4       	brne	.+24     	; 0x17a <__vector_13+0x3a>
	{
		if(value=='$')
 162:	80 91 ee 00 	lds	r24, 0x00EE
 166:	84 32       	cpi	r24, 0x24	; 36
 168:	71 f5       	brne	.+92     	; 0x1c6 <__vector_13+0x86>
		{
	        start2=1;
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	80 93 c4 00 	sts	0x00C4, r24
			k=0;
 170:	10 92 a3 00 	sts	0x00A3, r1
 174:	10 92 a2 00 	sts	0x00A2, r1
 178:	26 c0       	rjmp	.+76     	; 0x1c6 <__vector_13+0x86>
		}
		
	}
	else 
	{
		if(value=='*')
 17a:	80 91 ee 00 	lds	r24, 0x00EE
 17e:	8a 32       	cpi	r24, 0x2A	; 42
 180:	99 f4       	brne	.+38     	; 0x1a8 <__vector_13+0x68>
		{
	      start2=0;
 182:	10 92 c4 00 	sts	0x00C4, r1
		  com2[k]='\0';
 186:	e0 91 a2 00 	lds	r30, 0x00A2
 18a:	f0 91 a3 00 	lds	r31, 0x00A3
 18e:	eb 53       	subi	r30, 0x3B	; 59
 190:	ff 4f       	sbci	r31, 0xFF	; 255
 192:	10 82       	st	Z, r1
			flag2=1;
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	80 93 aa 00 	sts	0x00AA, r24
			k=0;
 19a:	10 92 a3 00 	sts	0x00A3, r1
 19e:	10 92 a2 00 	sts	0x00A2, r1
			overflag=0;
 1a2:	10 92 a9 00 	sts	0x00A9, r1
 1a6:	0f c0       	rjmp	.+30     	; 0x1c6 <__vector_13+0x86>
		}
		else
		{
		com2[k++]=value;
 1a8:	80 91 a2 00 	lds	r24, 0x00A2
 1ac:	90 91 a3 00 	lds	r25, 0x00A3
 1b0:	20 91 ee 00 	lds	r18, 0x00EE
 1b4:	fc 01       	movw	r30, r24
 1b6:	eb 53       	subi	r30, 0x3B	; 59
 1b8:	ff 4f       	sbci	r31, 0xFF	; 255
 1ba:	20 83       	st	Z, r18
 1bc:	01 96       	adiw	r24, 0x01	; 1
 1be:	90 93 a3 00 	sts	0x00A3, r25
 1c2:	80 93 a2 00 	sts	0x00A2, r24
			}
		}
	}
	
label1:
	if(overflag==0)
 1c6:	80 91 a9 00 	lds	r24, 0x00A9
 1ca:	88 23       	and	r24, r24
 1cc:	c1 f5       	brne	.+112    	; 0x23e <__vector_13+0xfe>
	{
	if(start1==0)
 1ce:	80 91 af 00 	lds	r24, 0x00AF
 1d2:	88 23       	and	r24, r24
 1d4:	81 f4       	brne	.+32     	; 0x1f6 <__vector_13+0xb6>
	{
	if(value=='C')
 1d6:	80 91 ee 00 	lds	r24, 0x00EE
 1da:	83 34       	cpi	r24, 0x43	; 67
 1dc:	81 f5       	brne	.+96     	; 0x23e <__vector_13+0xfe>
		{
			com[0]='C';
 1de:	80 93 b0 00 	sts	0x00B0, r24
			start1=1;
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	80 93 af 00 	sts	0x00AF, r24
			i=1;
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	90 93 a7 00 	sts	0x00A7, r25
 1f0:	80 93 a6 00 	sts	0x00A6, r24
 1f4:	24 c0       	rjmp	.+72     	; 0x23e <__vector_13+0xfe>
		}
	}
	else
	{
	if(value=='\r')
 1f6:	80 91 ee 00 	lds	r24, 0x00EE
 1fa:	8d 30       	cpi	r24, 0x0D	; 13
 1fc:	89 f4       	brne	.+34     	; 0x220 <__vector_13+0xe0>
		{
		start1=0;
 1fe:	10 92 af 00 	sts	0x00AF, r1
		com[i]='\0';
 202:	e0 91 a6 00 	lds	r30, 0x00A6
 206:	f0 91 a7 00 	lds	r31, 0x00A7
 20a:	e0 55       	subi	r30, 0x50	; 80
 20c:	ff 4f       	sbci	r31, 0xFF	; 255
 20e:	10 82       	st	Z, r1
		flag1=1;
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	80 93 ab 00 	sts	0x00AB, r24
		i=0;
 216:	10 92 a7 00 	sts	0x00A7, r1
 21a:	10 92 a6 00 	sts	0x00A6, r1
 21e:	0f c0       	rjmp	.+30     	; 0x23e <__vector_13+0xfe>
		}
	else
		{
		com[i++]=value;
 220:	80 91 a6 00 	lds	r24, 0x00A6
 224:	90 91 a7 00 	lds	r25, 0x00A7
 228:	20 91 ee 00 	lds	r18, 0x00EE
 22c:	fc 01       	movw	r30, r24
 22e:	e0 55       	subi	r30, 0x50	; 80
 230:	ff 4f       	sbci	r31, 0xFF	; 255
 232:	20 83       	st	Z, r18
 234:	01 96       	adiw	r24, 0x01	; 1
 236:	90 93 a7 00 	sts	0x00A7, r25
 23a:	80 93 a6 00 	sts	0x00A6, r24
		}
		}
	}	
}
 23e:	ff 91       	pop	r31
 240:	ef 91       	pop	r30
 242:	9f 91       	pop	r25
 244:	8f 91       	pop	r24
 246:	2f 91       	pop	r18
 248:	0f 90       	pop	r0
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	0f 90       	pop	r0
 24e:	1f 90       	pop	r1
 250:	18 95       	reti

00000252 <send_char>:


void send_char(volatile unsigned char c)
{
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
 256:	0f 92       	push	r0
 258:	cd b7       	in	r28, 0x3d	; 61
 25a:	de b7       	in	r29, 0x3e	; 62
 25c:	89 83       	std	Y+1, r24	; 0x01
	
	UCSRA=0x40;
 25e:	80 e4       	ldi	r24, 0x40	; 64
 260:	8b b9       	out	0x0b, r24	; 11
	UDR=c;
 262:	89 81       	ldd	r24, Y+1	; 0x01
 264:	8c b9       	out	0x0c, r24	; 12
	while((UCSRA & 0x40)==0);
 266:	5e 9b       	sbis	0x0b, 6	; 11
 268:	fe cf       	rjmp	.-4      	; 0x266 <send_char+0x14>
}
 26a:	0f 90       	pop	r0
 26c:	df 91       	pop	r29
 26e:	cf 91       	pop	r28
 270:	08 95       	ret

00000272 <prints>:



void prints(char *ptr)
{
 272:	cf 93       	push	r28
 274:	df 93       	push	r29
 276:	ec 01       	movw	r28, r24
	
	while(*ptr)
 278:	88 81       	ld	r24, Y
 27a:	88 23       	and	r24, r24
 27c:	31 f0       	breq	.+12     	; 0x28a <prints+0x18>
	while((UCSRA & 0x40)==0);
}



void prints(char *ptr)
 27e:	21 96       	adiw	r28, 0x01	; 1
{
	
	while(*ptr)
	{
		
		send_char(*ptr);
 280:	0e 94 29 01 	call	0x252	; 0x252 <send_char>


void prints(char *ptr)
{
	
	while(*ptr)
 284:	89 91       	ld	r24, Y+
 286:	88 23       	and	r24, r24
 288:	d9 f7       	brne	.-10     	; 0x280 <prints+0xe>
	{
		
		send_char(*ptr);
		ptr++;
	}
}
 28a:	df 91       	pop	r29
 28c:	cf 91       	pop	r28
 28e:	08 95       	ret

00000290 <gsm_msg>:



void gsm_msg()
{
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
	if(flag1==1)
 294:	80 91 ab 00 	lds	r24, 0x00AB
 298:	81 30       	cpi	r24, 0x01	; 1
 29a:	09 f0       	breq	.+2      	; 0x29e <gsm_msg+0xe>
 29c:	65 c0       	rjmp	.+202    	; 0x368 <gsm_msg+0xd8>
		{
			
			len=strlen(com);
 29e:	c0 eb       	ldi	r28, 0xB0	; 176
 2a0:	d0 e0       	ldi	r29, 0x00	; 0
 2a2:	fe 01       	movw	r30, r28
 2a4:	01 90       	ld	r0, Z+
 2a6:	00 20       	and	r0, r0
 2a8:	e9 f7       	brne	.-6      	; 0x2a4 <gsm_msg+0x14>
 2aa:	31 97       	sbiw	r30, 0x01	; 1
 2ac:	ec 1b       	sub	r30, r28
 2ae:	fd 0b       	sbc	r31, r29
 2b0:	f0 93 ae 00 	sts	0x00AE, r31
 2b4:	e0 93 ad 00 	sts	0x00AD, r30
			lcd_command(0xc0);
 2b8:	80 ec       	ldi	r24, 0xC0	; 192
 2ba:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
			lcd_print(com);           //com contains the message location number in the sim
 2be:	ce 01       	movw	r24, r28
 2c0:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_print>
	        len=len-1;
 2c4:	80 91 ad 00 	lds	r24, 0x00AD
 2c8:	90 91 ae 00 	lds	r25, 0x00AE
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	90 93 ae 00 	sts	0x00AE, r25
 2d2:	80 93 ad 00 	sts	0x00AD, r24
 2d6:	2f ef       	ldi	r18, 0xFF	; 255
 2d8:	33 ed       	ldi	r19, 0xD3	; 211
 2da:	40 e3       	ldi	r20, 0x30	; 48
 2dc:	21 50       	subi	r18, 0x01	; 1
 2de:	30 40       	sbci	r19, 0x00	; 0
 2e0:	40 40       	sbci	r20, 0x00	; 0
 2e2:	e1 f7       	brne	.-8      	; 0x2dc <gsm_msg+0x4c>
 2e4:	00 c0       	rjmp	.+0      	; 0x2e6 <gsm_msg+0x56>
 2e6:	00 00       	nop
		    _delay_ms(1000);
			
			if(len==12)
 2e8:	8c 30       	cpi	r24, 0x0C	; 12
 2ea:	91 05       	cpc	r25, r1
 2ec:	e1 f4       	brne	.+56     	; 0x326 <gsm_msg+0x96>
			{
				prints("AT+CMGR=");
 2ee:	80 e6       	ldi	r24, 0x60	; 96
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 39 01 	call	0x272	; 0x272 <prints>
				send_char(com[len-1]);
 2f6:	e0 91 ad 00 	lds	r30, 0x00AD
 2fa:	f0 91 ae 00 	lds	r31, 0x00AE
 2fe:	ec 0f       	add	r30, r28
 300:	fd 1f       	adc	r31, r29
 302:	31 97       	sbiw	r30, 0x01	; 1
 304:	80 81       	ld	r24, Z
 306:	0e 94 29 01 	call	0x252	; 0x252 <send_char>
				send_char(com[len]);
 30a:	80 91 ad 00 	lds	r24, 0x00AD
 30e:	90 91 ae 00 	lds	r25, 0x00AE
 312:	c8 0f       	add	r28, r24
 314:	d9 1f       	adc	r29, r25
 316:	88 81       	ld	r24, Y
 318:	0e 94 29 01 	call	0x252	; 0x252 <send_char>
				prints("\r\n");
 31c:	89 e6       	ldi	r24, 0x69	; 105
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 39 01 	call	0x272	; 0x272 <prints>
 324:	11 c0       	rjmp	.+34     	; 0x348 <gsm_msg+0xb8>
			}
			else
			{
				prints("AT+CMGR=");
 326:	80 e6       	ldi	r24, 0x60	; 96
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 39 01 	call	0x272	; 0x272 <prints>
				send_char(com[len]);
 32e:	e0 91 ad 00 	lds	r30, 0x00AD
 332:	f0 91 ae 00 	lds	r31, 0x00AE
 336:	e0 55       	subi	r30, 0x50	; 80
 338:	ff 4f       	sbci	r31, 0xFF	; 255
 33a:	80 81       	ld	r24, Z
 33c:	0e 94 29 01 	call	0x252	; 0x252 <send_char>
				prints("\r\n");
 340:	89 e6       	ldi	r24, 0x69	; 105
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 39 01 	call	0x272	; 0x272 <prints>
				
			}
			
			if((strcmp(com,"CARRIER")))
 348:	80 eb       	ldi	r24, 0xB0	; 176
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	6c e6       	ldi	r22, 0x6C	; 108
 34e:	70 e0       	ldi	r23, 0x00	; 0
 350:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <strcmp>
 354:	28 2f       	mov	r18, r24
 356:	39 2f       	mov	r19, r25
 358:	21 15       	cp	r18, r1
 35a:	31 05       	cpc	r19, r1
 35c:	19 f0       	breq	.+6      	; 0x364 <gsm_msg+0xd4>
			{
				//when call is recieved by gsm a msg'CARRIER'is sent back which sets the overflow flag unnecessarily to avoid tat if loop is used
				overflag=1;
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	80 93 a9 00 	sts	0x00A9, r24
			}
			flag1 = 0 ;
 364:	10 92 ab 00 	sts	0x00AB, r1
			}
		   if(flag2==1)                     //com2 contains the message to be displayed
 368:	80 91 aa 00 	lds	r24, 0x00AA
 36c:	81 30       	cpi	r24, 0x01	; 1
 36e:	09 f0       	breq	.+2      	; 0x372 <gsm_msg+0xe2>
 370:	41 c0       	rjmp	.+130    	; 0x3f4 <gsm_msg+0x164>
		{
			lcd_command(0x01);
 372:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
		    lcd_command(0x80);
 376:	80 e8       	ldi	r24, 0x80	; 128
 378:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
			lcd_print(com2);
 37c:	85 ec       	ldi	r24, 0xC5	; 197
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_print>
		  if(len==12)
 384:	80 91 ad 00 	lds	r24, 0x00AD
 388:	90 91 ae 00 	lds	r25, 0x00AE
 38c:	8c 30       	cpi	r24, 0x0C	; 12
 38e:	91 05       	cpc	r25, r1
 390:	f1 f4       	brne	.+60     	; 0x3ce <gsm_msg+0x13e>
			{
	            prints("AT+CMGD=");
 392:	84 e7       	ldi	r24, 0x74	; 116
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 39 01 	call	0x272	; 0x272 <prints>
				send_char(com[len-1]);
 39a:	c0 eb       	ldi	r28, 0xB0	; 176
 39c:	d0 e0       	ldi	r29, 0x00	; 0
 39e:	e0 91 ad 00 	lds	r30, 0x00AD
 3a2:	f0 91 ae 00 	lds	r31, 0x00AE
 3a6:	ec 0f       	add	r30, r28
 3a8:	fd 1f       	adc	r31, r29
 3aa:	31 97       	sbiw	r30, 0x01	; 1
 3ac:	80 81       	ld	r24, Z
 3ae:	0e 94 29 01 	call	0x252	; 0x252 <send_char>
				send_char(com[len]);
 3b2:	80 91 ad 00 	lds	r24, 0x00AD
 3b6:	90 91 ae 00 	lds	r25, 0x00AE
 3ba:	c8 0f       	add	r28, r24
 3bc:	d9 1f       	adc	r29, r25
 3be:	88 81       	ld	r24, Y
 3c0:	0e 94 29 01 	call	0x252	; 0x252 <send_char>
				prints("\r\n");
 3c4:	89 e6       	ldi	r24, 0x69	; 105
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 39 01 	call	0x272	; 0x272 <prints>
 3cc:	11 c0       	rjmp	.+34     	; 0x3f0 <gsm_msg+0x160>
			}
			else
			{
			    prints("AT+CMGD=");
 3ce:	84 e7       	ldi	r24, 0x74	; 116
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	0e 94 39 01 	call	0x272	; 0x272 <prints>
				send_char(com[len]);
 3d6:	e0 91 ad 00 	lds	r30, 0x00AD
 3da:	f0 91 ae 00 	lds	r31, 0x00AE
 3de:	e0 55       	subi	r30, 0x50	; 80
 3e0:	ff 4f       	sbci	r31, 0xFF	; 255
 3e2:	80 81       	ld	r24, Z
 3e4:	0e 94 29 01 	call	0x252	; 0x252 <send_char>
				prints("\r\n");
 3e8:	89 e6       	ldi	r24, 0x69	; 105
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 39 01 	call	0x272	; 0x272 <prints>
			}
			flag2 = 0 ;
 3f0:	10 92 aa 00 	sts	0x00AA, r1
 3f4:	8f ef       	ldi	r24, 0xFF	; 255
 3f6:	93 e2       	ldi	r25, 0x23	; 35
 3f8:	a4 ef       	ldi	r26, 0xF4	; 244
 3fa:	81 50       	subi	r24, 0x01	; 1
 3fc:	90 40       	sbci	r25, 0x00	; 0
 3fe:	a0 40       	sbci	r26, 0x00	; 0
 400:	e1 f7       	brne	.-8      	; 0x3fa <gsm_msg+0x16a>
 402:	00 c0       	rjmp	.+0      	; 0x404 <gsm_msg+0x174>
 404:	00 00       	nop
		}
		_delay_ms(5000);
		overflag=0;
 406:	10 92 a9 00 	sts	0x00A9, r1
}
 40a:	df 91       	pop	r29
 40c:	cf 91       	pop	r28
 40e:	08 95       	ret

00000410 <main>:

int main(void)
{
	
	
	DDRB=0xff;
 410:	8f ef       	ldi	r24, 0xFF	; 255
 412:	87 bb       	out	0x17, r24	; 23
	float a=0;
	char dispbuf[5];
	UBRRH=0;
 414:	10 bc       	out	0x20, r1	; 32
	UBRRL=103;
 416:	97 e6       	ldi	r25, 0x67	; 103
 418:	99 b9       	out	0x09, r25	; 9
	
	UCSRA=0x00;
 41a:	1b b8       	out	0x0b, r1	; 11
	UCSRB=0x98;
 41c:	98 e9       	ldi	r25, 0x98	; 152
 41e:	9a b9       	out	0x0a, r25	; 10
	UCSRC=0x86;
 420:	96 e8       	ldi	r25, 0x86	; 134
 422:	90 bd       	out	0x20, r25	; 32
	sei();
 424:	78 94       	sei
	
	DDRB=0x07;
 426:	97 e0       	ldi	r25, 0x07	; 7
 428:	97 bb       	out	0x17, r25	; 23
	DDRC=0xFF;
 42a:	84 bb       	out	0x14, r24	; 20
 42c:	8f e1       	ldi	r24, 0x1F	; 31
 42e:	9e e4       	ldi	r25, 0x4E	; 78
 430:	01 97       	sbiw	r24, 0x01	; 1
 432:	f1 f7       	brne	.-4      	; 0x430 <main+0x20>
 434:	00 c0       	rjmp	.+0      	; 0x436 <main+0x26>
 436:	00 00       	nop
	_delay_ms(5);
	PORTC = 0x30;
 438:	80 e3       	ldi	r24, 0x30	; 48
 43a:	85 bb       	out	0x15, r24	; 21
 43c:	af e1       	ldi	r26, 0x1F	; 31
 43e:	be e4       	ldi	r27, 0x4E	; 78
 440:	11 97       	sbiw	r26, 0x01	; 1
 442:	f1 f7       	brne	.-4      	; 0x440 <main+0x30>
 444:	00 c0       	rjmp	.+0      	; 0x446 <main+0x36>
 446:	00 00       	nop
	
	_delay_ms(5);

	PORTC = 0x30;
 448:	85 bb       	out	0x15, r24	; 21
 44a:	ef e1       	ldi	r30, 0x1F	; 31
 44c:	fe e4       	ldi	r31, 0x4E	; 78
 44e:	31 97       	sbiw	r30, 0x01	; 1
 450:	f1 f7       	brne	.-4      	; 0x44e <main+0x3e>
 452:	00 c0       	rjmp	.+0      	; 0x454 <main+0x44>
 454:	00 00       	nop
	_delay_ms(5);
	lcd_command(0x30);
 456:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
 45a:	8f e1       	ldi	r24, 0x1F	; 31
 45c:	9e e4       	ldi	r25, 0x4E	; 78
 45e:	01 97       	sbiw	r24, 0x01	; 1
 460:	f1 f7       	brne	.-4      	; 0x45e <main+0x4e>
 462:	00 c0       	rjmp	.+0      	; 0x464 <main+0x54>
 464:	00 00       	nop
	_delay_ms(5);
	lcd_command(0x28);
 466:	88 e2       	ldi	r24, 0x28	; 40
 468:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
 46c:	af e1       	ldi	r26, 0x1F	; 31
 46e:	be e4       	ldi	r27, 0x4E	; 78
 470:	11 97       	sbiw	r26, 0x01	; 1
 472:	f1 f7       	brne	.-4      	; 0x470 <main+0x60>
 474:	00 c0       	rjmp	.+0      	; 0x476 <main+0x66>
 476:	00 00       	nop
	_delay_ms(5);

	lcd_command(0x01);
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	lcd_command(0x06);
 47e:	86 e0       	ldi	r24, 0x06	; 6
 480:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	lcd_command(0X0c);
 484:	8c e0       	ldi	r24, 0x0C	; 12
 486:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	lcd_command(0x80);
 48a:	80 e8       	ldi	r24, 0x80	; 128
 48c:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	
	
	
	lcd_command(0x80);
 490:	80 e8       	ldi	r24, 0x80	; 128
 492:	0e 94 49 00 	call	0x92	; 0x92 <lcd_command>
	lcd_print("njj");
 496:	8d e7       	ldi	r24, 0x7D	; 125
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	0e 94 72 00 	call	0xe4	; 0xe4 <lcd_print>
	
	prints("AT\r\n");
 49e:	81 e8       	ldi	r24, 0x81	; 129
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	0e 94 39 01 	call	0x272	; 0x272 <prints>
 4a6:	8f ef       	ldi	r24, 0xFF	; 255
 4a8:	93 e2       	ldi	r25, 0x23	; 35
 4aa:	a4 ef       	ldi	r26, 0xF4	; 244
 4ac:	81 50       	subi	r24, 0x01	; 1
 4ae:	90 40       	sbci	r25, 0x00	; 0
 4b0:	a0 40       	sbci	r26, 0x00	; 0
 4b2:	e1 f7       	brne	.-8      	; 0x4ac <main+0x9c>
 4b4:	00 c0       	rjmp	.+0      	; 0x4b6 <main+0xa6>
 4b6:	00 00       	nop
	_delay_ms(5000);
	prints("ATE0\r\n");  //the code below is to send the message to any number
 4b8:	86 e8       	ldi	r24, 0x86	; 134
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	0e 94 39 01 	call	0x272	; 0x272 <prints>
	prints("hello");
	
	_delay_ms(2000);
	send_char(0x1A);*/

prints("AT+CNMI=2,1,0,0,0\r\n");
 4c0:	8d e8       	ldi	r24, 0x8D	; 141
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	0e 94 39 01 	call	0x272	; 0x272 <prints>
	
	
    while(1)
    {
   
	gsm_msg();		
 4c8:	0e 94 48 01 	call	0x290	; 0x290 <gsm_msg>
 4cc:	fd cf       	rjmp	.-6      	; 0x4c8 <main+0xb8>

000004ce <__udivmodhi4>:
 4ce:	aa 1b       	sub	r26, r26
 4d0:	bb 1b       	sub	r27, r27
 4d2:	51 e1       	ldi	r21, 0x11	; 17
 4d4:	07 c0       	rjmp	.+14     	; 0x4e4 <__udivmodhi4_ep>

000004d6 <__udivmodhi4_loop>:
 4d6:	aa 1f       	adc	r26, r26
 4d8:	bb 1f       	adc	r27, r27
 4da:	a6 17       	cp	r26, r22
 4dc:	b7 07       	cpc	r27, r23
 4de:	10 f0       	brcs	.+4      	; 0x4e4 <__udivmodhi4_ep>
 4e0:	a6 1b       	sub	r26, r22
 4e2:	b7 0b       	sbc	r27, r23

000004e4 <__udivmodhi4_ep>:
 4e4:	88 1f       	adc	r24, r24
 4e6:	99 1f       	adc	r25, r25
 4e8:	5a 95       	dec	r21
 4ea:	a9 f7       	brne	.-22     	; 0x4d6 <__udivmodhi4_loop>
 4ec:	80 95       	com	r24
 4ee:	90 95       	com	r25
 4f0:	bc 01       	movw	r22, r24
 4f2:	cd 01       	movw	r24, r26
 4f4:	08 95       	ret

000004f6 <strcmp>:
 4f6:	fb 01       	movw	r30, r22
 4f8:	dc 01       	movw	r26, r24
 4fa:	8d 91       	ld	r24, X+
 4fc:	01 90       	ld	r0, Z+
 4fe:	80 19       	sub	r24, r0
 500:	01 10       	cpse	r0, r1
 502:	d9 f3       	breq	.-10     	; 0x4fa <strcmp+0x4>
 504:	99 0b       	sbc	r25, r25
 506:	08 95       	ret

00000508 <_exit>:
 508:	f8 94       	cli

0000050a <__stop_program>:
 50a:	ff cf       	rjmp	.-2      	; 0x50a <__stop_program>
