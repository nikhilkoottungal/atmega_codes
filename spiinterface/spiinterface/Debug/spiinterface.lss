
spiinterface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000000ea  0000015e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000838  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000080  00000000  00000000  000008c0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000441  00000000  00000000  00000940  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000185  00000000  00000000  00000d81  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033e  00000000  00000000  00000f06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001244  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000012e  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000001f  00000000  00000000  000013b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ee       	ldi	r30, 0xEA	; 234
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ae e6       	ldi	r26, 0x6E	; 110
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 36       	cpi	r26, 0x6E	; 110
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  8a:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <SPI_masterInit>:


void SPI_masterInit()
{
	
	DDR_SPI =(1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_SS);
  92:	80 eb       	ldi	r24, 0xB0	; 176
  94:	87 bb       	out	0x17, r24	; 23
	SPCR=(1<<SPE)|(1<<MSTR)|(1<<SPR0)|(1<<CPOL);//0x5c
  96:	89 e5       	ldi	r24, 0x59	; 89
  98:	8d b9       	out	0x0d, r24	; 13
}
  9a:	08 95       	ret

0000009c <SPI_masterTransmit>:

void SPI_masterTransmit(char data)
{
	SPDR=data;
  9c:	8f b9       	out	0x0f, r24	; 15
	while((SPSR & 0x80)==0);
  9e:	77 9b       	sbis	0x0e, 7	; 14
  a0:	fe cf       	rjmp	.-4      	; 0x9e <SPI_masterTransmit+0x2>
	
	
}
  a2:	08 95       	ret

000000a4 <main>:
int main(void)
{
	
	
	char loc=0;
	SPI_masterInit();
  a4:	0e 94 49 00 	call	0x92	; 0x92 <SPI_masterInit>
}
int main(void)
{
	
	
	char loc=0;
  a8:	10 e0       	ldi	r17, 0x00	; 0
        //TODO:: Please write your application code 
		while(loc<11)
		{
			
		
		SPI_masterTransmit(number[loc]);
  aa:	0f 2e       	mov	r0, r31
  ac:	f0 e6       	ldi	r31, 0x60	; 96
  ae:	ef 2e       	mov	r14, r31
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	ff 2e       	mov	r15, r31
  b4:	f0 2d       	mov	r31, r0
		SPI_masterTransmit(number[loc++]);
		_delay_ms(1000);
		}
		loc=0;		
  b6:	00 e0       	ldi	r16, 0x00	; 0
        //TODO:: Please write your application code 
		while(loc<11)
		{
			
		
		SPI_masterTransmit(number[loc]);
  b8:	e7 01       	movw	r28, r14
  ba:	c1 0f       	add	r28, r17
  bc:	d1 1d       	adc	r29, r1
  be:	88 81       	ld	r24, Y
  c0:	0e 94 4e 00 	call	0x9c	; 0x9c <SPI_masterTransmit>
		SPI_masterTransmit(number[loc++]);
  c4:	1f 5f       	subi	r17, 0xFF	; 255
  c6:	88 81       	ld	r24, Y
  c8:	0e 94 4e 00 	call	0x9c	; 0x9c <SPI_masterTransmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  cc:	8f ef       	ldi	r24, 0xFF	; 255
  ce:	93 ed       	ldi	r25, 0xD3	; 211
  d0:	a0 e3       	ldi	r26, 0x30	; 48
  d2:	81 50       	subi	r24, 0x01	; 1
  d4:	90 40       	sbci	r25, 0x00	; 0
  d6:	a0 40       	sbci	r26, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x2e>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x38>
  dc:	00 00       	nop
	char loc=0;
	SPI_masterInit();
    while(1)
    {
        //TODO:: Please write your application code 
		while(loc<11)
  de:	1b 30       	cpi	r17, 0x0B	; 11
  e0:	58 f3       	brcs	.-42     	; 0xb8 <main+0x14>
		
		SPI_masterTransmit(number[loc]);
		SPI_masterTransmit(number[loc++]);
		_delay_ms(1000);
		}
		loc=0;		
  e2:	10 2f       	mov	r17, r16
  e4:	e9 cf       	rjmp	.-46     	; 0xb8 <main+0x14>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>
